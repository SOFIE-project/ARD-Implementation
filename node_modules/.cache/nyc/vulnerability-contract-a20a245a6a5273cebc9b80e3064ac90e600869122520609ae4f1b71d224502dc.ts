"use strict";/*
 * SPDX-License-Identifier: Apache-2.0
 */function cov_t48xk83u(){var path="/home/prateeti/SOFIE-private-ledger/vulnerability-private-data-collections/src/vulnerability-contract.ts";var hash="d6328b3f9050082e868490ea43780965e91f16dc";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/prateeti/SOFIE-private-ledger/vulnerability-private-data-collections/src/vulnerability-contract.ts",statementMap:{"0":{start:{line:5,column:17},end:{line:10,column:1}},"1":{start:{line:6,column:12},end:{line:6,column:28}},"2":{start:{line:6,column:34},end:{line:6,column:125}},"3":{start:{line:7,column:4},end:{line:8,column:150}},"4":{start:{line:7,column:79},end:{line:7,column:131}},"5":{start:{line:8,column:9},end:{line:8,column:150}},"6":{start:{line:8,column:22},end:{line:8,column:43}},"7":{start:{line:8,column:58},end:{line:8,column:150}},"8":{start:{line:8,column:81},end:{line:8,column:150}},"9":{start:{line:9,column:4},end:{line:9,column:66}},"10":{start:{line:11,column:17},end:{line:13,column:1}},"11":{start:{line:12,column:4},end:{line:12,column:109}},"12":{start:{line:12,column:79},end:{line:12,column:109}},"13":{start:{line:14,column:0},end:{line:14,column:62}},"14":{start:{line:15,column:0},end:{line:15,column:39}},"15":{start:{line:16,column:15},end:{line:16,column:32}},"16":{start:{line:17,column:30},end:{line:17,column:60}},"17":{start:{line:18,column:24},end:{line:18,column:50}},"18":{start:{line:19,column:25},end:{line:19,column:40}},"19":{start:{line:20,column:28},end:{line:300,column:1}},"20":{start:{line:22,column:23},end:{line:22,column:91}},"21":{start:{line:23,column:8},end:{line:23,column:47}},"22":{start:{line:26,column:23},end:{line:26,column:75}},"23":{start:{line:27,column:8},end:{line:29,column:9}},"24":{start:{line:28,column:12},end:{line:28,column:97}},"25":{start:{line:30,column:29},end:{line:30,column:64}},"26":{start:{line:31,column:30},end:{line:31,column:53}},"27":{start:{line:32,column:8},end:{line:34,column:9}},"28":{start:{line:33,column:12},end:{line:33,column:96}},"29":{start:{line:35,column:8},end:{line:37,column:9}},"30":{start:{line:36,column:12},end:{line:36,column:103}},"31":{start:{line:38,column:8},end:{line:38,column:79}},"32":{start:{line:39,column:8},end:{line:41,column:9}},"33":{start:{line:40,column:12},end:{line:40,column:105}},"34":{start:{line:42,column:8},end:{line:42,column:83}},"35":{start:{line:43,column:8},end:{line:45,column:9}},"36":{start:{line:44,column:12},end:{line:44,column:106}},"37":{start:{line:46,column:8},end:{line:46,column:85}},"38":{start:{line:47,column:8},end:{line:49,column:9}},"39":{start:{line:48,column:12},end:{line:48,column:112}},"40":{start:{line:50,column:8},end:{line:50,column:97}},"41":{start:{line:51,column:8},end:{line:53,column:9}},"42":{start:{line:52,column:12},end:{line:52,column:116}},"43":{start:{line:54,column:8},end:{line:54,column:105}},"44":{start:{line:59,column:8},end:{line:61,column:9}},"45":{start:{line:60,column:12},end:{line:60,column:106}},"46":{start:{line:62,column:8},end:{line:62,column:85}},"47":{start:{line:63,column:8},end:{line:65,column:9}},"48":{start:{line:64,column:12},end:{line:64,column:107}},"49":{start:{line:66,column:8},end:{line:66,column:87}},"50":{start:{line:67,column:8},end:{line:67,column:116}},"51":{start:{line:70,column:23},end:{line:70,column:75}},"52":{start:{line:71,column:8},end:{line:73,column:9}},"53":{start:{line:72,column:12},end:{line:72,column:89}},"54":{start:{line:75,column:28},end:{line:75,column:92}},"55":{start:{line:76,column:8},end:{line:76,column:63}},"56":{start:{line:77,column:8},end:{line:77,column:33}},"57":{start:{line:102,column:23},end:{line:102,column:75}},"58":{start:{line:103,column:8},end:{line:105,column:9}},"59":{start:{line:104,column:12},end:{line:104,column:89}},"60":{start:{line:106,column:29},end:{line:106,column:64}},"61":{start:{line:107,column:30},end:{line:107,column:53}},"62":{start:{line:108,column:8},end:{line:110,column:9}},"63":{start:{line:109,column:12},end:{line:109,column:103}},"64":{start:{line:111,column:8},end:{line:113,column:9}},"65":{start:{line:112,column:12},end:{line:112,column:105}},"66":{start:{line:114,column:8},end:{line:116,column:9}},"67":{start:{line:115,column:12},end:{line:115,column:106}},"68":{start:{line:117,column:8},end:{line:119,column:9}},"69":{start:{line:118,column:12},end:{line:118,column:112}},"70":{start:{line:120,column:8},end:{line:122,column:9}},"71":{start:{line:121,column:12},end:{line:121,column:116}},"72":{start:{line:126,column:8},end:{line:128,column:9}},"73":{start:{line:127,column:12},end:{line:127,column:106}},"74":{start:{line:129,column:8},end:{line:131,column:9}},"75":{start:{line:130,column:12},end:{line:130,column:107}},"76":{start:{line:132,column:8},end:{line:132,column:79}},"77":{start:{line:133,column:8},end:{line:133,column:83}},"78":{start:{line:134,column:8},end:{line:134,column:85}},"79":{start:{line:135,column:8},end:{line:135,column:97}},"80":{start:{line:136,column:8},end:{line:136,column:105}},"81":{start:{line:138,column:8},end:{line:138,column:85}},"82":{start:{line:139,column:8},end:{line:139,column:87}},"83":{start:{line:140,column:8},end:{line:140,column:34}},"84":{start:{line:141,column:8},end:{line:141,column:116}},"85":{start:{line:144,column:23},end:{line:144,column:75}},"86":{start:{line:145,column:8},end:{line:147,column:9}},"87":{start:{line:146,column:12},end:{line:146,column:89}},"88":{start:{line:148,column:8},end:{line:148,column:76}},"89":{start:{line:152,column:29},end:{line:152,column:109}},"90":{start:{line:153,column:28},end:{line:153,column:96}},"91":{start:{line:154,column:8},end:{line:156,column:9}},"92":{start:{line:155,column:12},end:{line:155,column:85}},"93":{start:{line:157,column:27},end:{line:157,column:54}},"94":{start:{line:159,column:8},end:{line:164,column:9}},"95":{start:{line:160,column:12},end:{line:160,column:24}},"96":{start:{line:163,column:12},end:{line:163,column:25}},"97":{start:{line:168,column:8},end:{line:168,column:20}},"98":{start:{line:171,column:8},end:{line:171,column:20}},"99":{start:{line:174,column:19},end:{line:174,column:58}},"100":{start:{line:175,column:18},end:{line:175,column:34}},"101":{start:{line:176,column:8},end:{line:176,column:17}},"102":{start:{line:177,column:21},end:{line:180,column:9}},"103":{start:{line:181,column:8},end:{line:181,column:72}},"104":{start:{line:183,column:8},end:{line:183,column:20}},"105":{start:{line:257,column:32},end:{line:257,column:42}},"106":{start:{line:258,column:20},end:{line:258,column:66}},"107":{start:{line:259,column:8},end:{line:261,column:9}},"108":{start:{line:260,column:12},end:{line:260,column:46}},"109":{start:{line:281,column:23},end:{line:281,column:67}},"110":{start:{line:288,column:22},end:{line:288,column:33}},"111":{start:{line:289,column:25},end:{line:292,column:9}},"112":{start:{line:295,column:8},end:{line:295,column:80}},"113":{start:{line:297,column:8},end:{line:297,column:35}},"114":{start:{line:298,column:8},end:{line:298,column:22}},"115":{start:{line:301,column:0},end:{line:307,column:65}},"116":{start:{line:308,column:0},end:{line:313,column:65}},"117":{start:{line:314,column:0},end:{line:320,column:63}},"118":{start:{line:321,column:0},end:{line:326,column:65}},"119":{start:{line:327,column:0},end:{line:332,column:65}},"120":{start:{line:333,column:0},end:{line:338,column:65}},"121":{start:{line:339,column:0},end:{line:344,column:62}},"122":{start:{line:345,column:0},end:{line:350,column:63}},"123":{start:{line:351,column:0},end:{line:356,column:54}},"124":{start:{line:357,column:0},end:{line:363,column:64}},"125":{start:{line:364,column:0},end:{line:366,column:26}},"126":{start:{line:367,column:0},end:{line:367,column:54}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:5,column:46},end:{line:5,column:47}},loc:{start:{line:5,column:87},end:{line:10,column:1}},line:5},"1":{name:"(anonymous_1)",decl:{start:{line:11,column:46},end:{line:11,column:47}},loc:{start:{line:11,column:62},end:{line:13,column:1}},line:11},"2":{name:"(anonymous_2)",decl:{start:{line:21,column:4},end:{line:21,column:5}},loc:{start:{line:21,column:52},end:{line:24,column:5}},line:21},"3":{name:"(anonymous_3)",decl:{start:{line:25,column:4},end:{line:25,column:5}},loc:{start:{line:25,column:52},end:{line:68,column:5}},line:25},"4":{name:"(anonymous_4)",decl:{start:{line:69,column:4},end:{line:69,column:5}},loc:{start:{line:69,column:50},end:{line:78,column:5}},line:69},"5":{name:"(anonymous_5)",decl:{start:{line:101,column:4},end:{line:101,column:5}},loc:{start:{line:101,column:52},end:{line:142,column:5}},line:101},"6":{name:"(anonymous_6)",decl:{start:{line:143,column:4},end:{line:143,column:5}},loc:{start:{line:143,column:52},end:{line:149,column:5}},line:143},"7":{name:"(anonymous_7)",decl:{start:{line:150,column:4},end:{line:150,column:5}},loc:{start:{line:150,column:68},end:{line:165,column:5}},line:150},"8":{name:"(anonymous_8)",decl:{start:{line:167,column:4},end:{line:167,column:5}},loc:{start:{line:167,column:26},end:{line:169,column:5}},line:167},"9":{name:"(anonymous_9)",decl:{start:{line:170,column:4},end:{line:170,column:5}},loc:{start:{line:170,column:27},end:{line:172,column:5}},line:170},"10":{name:"(anonymous_10)",decl:{start:{line:173,column:4},end:{line:173,column:5}},loc:{start:{line:173,column:30},end:{line:184,column:5}},line:173},"11":{name:"(anonymous_11)",decl:{start:{line:254,column:4},end:{line:254,column:5}},loc:{start:{line:254,column:59},end:{line:299,column:5}},line:254}},branchMap:{"0":{loc:{start:{line:5,column:17},end:{line:10,column:1}},type:"binary-expr",locations:[{start:{line:5,column:18},end:{line:5,column:22}},{start:{line:5,column:26},end:{line:5,column:41}},{start:{line:5,column:46},end:{line:10,column:1}}],line:5},"1":{loc:{start:{line:6,column:34},end:{line:6,column:125}},type:"cond-expr",locations:[{start:{line:6,column:42},end:{line:6,column:48}},{start:{line:6,column:51},end:{line:6,column:125}}],line:6},"2":{loc:{start:{line:6,column:51},end:{line:6,column:125}},type:"cond-expr",locations:[{start:{line:6,column:67},end:{line:6,column:118}},{start:{line:6,column:121},end:{line:6,column:125}}],line:6},"3":{loc:{start:{line:7,column:4},end:{line:8,column:150}},type:"if",locations:[{start:{line:7,column:4},end:{line:8,column:150}},{start:{line:7,column:4},end:{line:8,column:150}}],line:7},"4":{loc:{start:{line:7,column:8},end:{line:7,column:77}},type:"binary-expr",locations:[{start:{line:7,column:8},end:{line:7,column:35}},{start:{line:7,column:39},end:{line:7,column:77}}],line:7},"5":{loc:{start:{line:8,column:58},end:{line:8,column:150}},type:"if",locations:[{start:{line:8,column:58},end:{line:8,column:150}},{start:{line:8,column:58},end:{line:8,column:150}}],line:8},"6":{loc:{start:{line:8,column:85},end:{line:8,column:149}},type:"binary-expr",locations:[{start:{line:8,column:86},end:{line:8,column:143}},{start:{line:8,column:148},end:{line:8,column:149}}],line:8},"7":{loc:{start:{line:8,column:86},end:{line:8,column:143}},type:"cond-expr",locations:[{start:{line:8,column:94},end:{line:8,column:98}},{start:{line:8,column:101},end:{line:8,column:143}}],line:8},"8":{loc:{start:{line:8,column:101},end:{line:8,column:143}},type:"cond-expr",locations:[{start:{line:8,column:109},end:{line:8,column:126}},{start:{line:8,column:129},end:{line:8,column:143}}],line:8},"9":{loc:{start:{line:9,column:11},end:{line:9,column:62}},type:"binary-expr",locations:[{start:{line:9,column:11},end:{line:9,column:16}},{start:{line:9,column:20},end:{line:9,column:21}},{start:{line:9,column:25},end:{line:9,column:62}}],line:9},"10":{loc:{start:{line:11,column:17},end:{line:13,column:1}},type:"binary-expr",locations:[{start:{line:11,column:18},end:{line:11,column:22}},{start:{line:11,column:26},end:{line:11,column:41}},{start:{line:11,column:46},end:{line:13,column:1}}],line:11},"11":{loc:{start:{line:12,column:4},end:{line:12,column:109}},type:"if",locations:[{start:{line:12,column:4},end:{line:12,column:109}},{start:{line:12,column:4},end:{line:12,column:109}}],line:12},"12":{loc:{start:{line:12,column:8},end:{line:12,column:77}},type:"binary-expr",locations:[{start:{line:12,column:8},end:{line:12,column:35}},{start:{line:12,column:39},end:{line:12,column:77}}],line:12},"13":{loc:{start:{line:23,column:16},end:{line:23,column:45}},type:"binary-expr",locations:[{start:{line:23,column:16},end:{line:23,column:24}},{start:{line:23,column:28},end:{line:23,column:45}}],line:23},"14":{loc:{start:{line:27,column:8},end:{line:29,column:9}},type:"if",locations:[{start:{line:27,column:8},end:{line:29,column:9}},{start:{line:27,column:8},end:{line:29,column:9}}],line:27},"15":{loc:{start:{line:32,column:8},end:{line:34,column:9}},type:"if",locations:[{start:{line:32,column:8},end:{line:34,column:9}},{start:{line:32,column:8},end:{line:34,column:9}}],line:32},"16":{loc:{start:{line:35,column:8},end:{line:37,column:9}},type:"if",locations:[{start:{line:35,column:8},end:{line:37,column:9}},{start:{line:35,column:8},end:{line:37,column:9}}],line:35},"17":{loc:{start:{line:35,column:12},end:{line:35,column:70}},type:"binary-expr",locations:[{start:{line:35,column:12},end:{line:35,column:36}},{start:{line:35,column:40},end:{line:35,column:70}}],line:35},"18":{loc:{start:{line:39,column:8},end:{line:41,column:9}},type:"if",locations:[{start:{line:39,column:8},end:{line:41,column:9}},{start:{line:39,column:8},end:{line:41,column:9}}],line:39},"19":{loc:{start:{line:39,column:12},end:{line:39,column:72}},type:"binary-expr",locations:[{start:{line:39,column:12},end:{line:39,column:36}},{start:{line:39,column:40},end:{line:39,column:72}}],line:39},"20":{loc:{start:{line:43,column:8},end:{line:45,column:9}},type:"if",locations:[{start:{line:43,column:8},end:{line:45,column:9}},{start:{line:43,column:8},end:{line:45,column:9}}],line:43},"21":{loc:{start:{line:43,column:12},end:{line:43,column:73}},type:"binary-expr",locations:[{start:{line:43,column:12},end:{line:43,column:36}},{start:{line:43,column:40},end:{line:43,column:73}}],line:43},"22":{loc:{start:{line:47,column:8},end:{line:49,column:9}},type:"if",locations:[{start:{line:47,column:8},end:{line:49,column:9}},{start:{line:47,column:8},end:{line:49,column:9}}],line:47},"23":{loc:{start:{line:47,column:12},end:{line:47,column:79}},type:"binary-expr",locations:[{start:{line:47,column:12},end:{line:47,column:36}},{start:{line:47,column:40},end:{line:47,column:79}}],line:47},"24":{loc:{start:{line:51,column:8},end:{line:53,column:9}},type:"if",locations:[{start:{line:51,column:8},end:{line:53,column:9}},{start:{line:51,column:8},end:{line:53,column:9}}],line:51},"25":{loc:{start:{line:51,column:12},end:{line:51,column:83}},type:"binary-expr",locations:[{start:{line:51,column:12},end:{line:51,column:36}},{start:{line:51,column:40},end:{line:51,column:83}}],line:51},"26":{loc:{start:{line:59,column:8},end:{line:61,column:9}},type:"if",locations:[{start:{line:59,column:8},end:{line:61,column:9}},{start:{line:59,column:8},end:{line:61,column:9}}],line:59},"27":{loc:{start:{line:59,column:12},end:{line:59,column:73}},type:"binary-expr",locations:[{start:{line:59,column:12},end:{line:59,column:36}},{start:{line:59,column:40},end:{line:59,column:73}}],line:59},"28":{loc:{start:{line:63,column:8},end:{line:65,column:9}},type:"if",locations:[{start:{line:63,column:8},end:{line:65,column:9}},{start:{line:63,column:8},end:{line:65,column:9}}],line:63},"29":{loc:{start:{line:63,column:12},end:{line:63,column:74}},type:"binary-expr",locations:[{start:{line:63,column:12},end:{line:63,column:36}},{start:{line:63,column:40},end:{line:63,column:74}}],line:63},"30":{loc:{start:{line:71,column:8},end:{line:73,column:9}},type:"if",locations:[{start:{line:71,column:8},end:{line:73,column:9}},{start:{line:71,column:8},end:{line:73,column:9}}],line:71},"31":{loc:{start:{line:103,column:8},end:{line:105,column:9}},type:"if",locations:[{start:{line:103,column:8},end:{line:105,column:9}},{start:{line:103,column:8},end:{line:105,column:9}}],line:103},"32":{loc:{start:{line:108,column:8},end:{line:110,column:9}},type:"if",locations:[{start:{line:108,column:8},end:{line:110,column:9}},{start:{line:108,column:8},end:{line:110,column:9}}],line:108},"33":{loc:{start:{line:108,column:12},end:{line:108,column:70}},type:"binary-expr",locations:[{start:{line:108,column:12},end:{line:108,column:36}},{start:{line:108,column:40},end:{line:108,column:70}}],line:108},"34":{loc:{start:{line:111,column:8},end:{line:113,column:9}},type:"if",locations:[{start:{line:111,column:8},end:{line:113,column:9}},{start:{line:111,column:8},end:{line:113,column:9}}],line:111},"35":{loc:{start:{line:111,column:12},end:{line:111,column:72}},type:"binary-expr",locations:[{start:{line:111,column:12},end:{line:111,column:36}},{start:{line:111,column:40},end:{line:111,column:72}}],line:111},"36":{loc:{start:{line:114,column:8},end:{line:116,column:9}},type:"if",locations:[{start:{line:114,column:8},end:{line:116,column:9}},{start:{line:114,column:8},end:{line:116,column:9}}],line:114},"37":{loc:{start:{line:114,column:12},end:{line:114,column:73}},type:"binary-expr",locations:[{start:{line:114,column:12},end:{line:114,column:36}},{start:{line:114,column:40},end:{line:114,column:73}}],line:114},"38":{loc:{start:{line:117,column:8},end:{line:119,column:9}},type:"if",locations:[{start:{line:117,column:8},end:{line:119,column:9}},{start:{line:117,column:8},end:{line:119,column:9}}],line:117},"39":{loc:{start:{line:117,column:12},end:{line:117,column:79}},type:"binary-expr",locations:[{start:{line:117,column:12},end:{line:117,column:36}},{start:{line:117,column:40},end:{line:117,column:79}}],line:117},"40":{loc:{start:{line:120,column:8},end:{line:122,column:9}},type:"if",locations:[{start:{line:120,column:8},end:{line:122,column:9}},{start:{line:120,column:8},end:{line:122,column:9}}],line:120},"41":{loc:{start:{line:120,column:12},end:{line:120,column:83}},type:"binary-expr",locations:[{start:{line:120,column:12},end:{line:120,column:36}},{start:{line:120,column:40},end:{line:120,column:83}}],line:120},"42":{loc:{start:{line:126,column:8},end:{line:128,column:9}},type:"if",locations:[{start:{line:126,column:8},end:{line:128,column:9}},{start:{line:126,column:8},end:{line:128,column:9}}],line:126},"43":{loc:{start:{line:126,column:12},end:{line:126,column:73}},type:"binary-expr",locations:[{start:{line:126,column:12},end:{line:126,column:36}},{start:{line:126,column:40},end:{line:126,column:73}}],line:126},"44":{loc:{start:{line:129,column:8},end:{line:131,column:9}},type:"if",locations:[{start:{line:129,column:8},end:{line:131,column:9}},{start:{line:129,column:8},end:{line:131,column:9}}],line:129},"45":{loc:{start:{line:129,column:12},end:{line:129,column:74}},type:"binary-expr",locations:[{start:{line:129,column:12},end:{line:129,column:36}},{start:{line:129,column:40},end:{line:129,column:74}}],line:129},"46":{loc:{start:{line:145,column:8},end:{line:147,column:9}},type:"if",locations:[{start:{line:145,column:8},end:{line:147,column:9}},{start:{line:145,column:8},end:{line:147,column:9}}],line:145},"47":{loc:{start:{line:154,column:8},end:{line:156,column:9}},type:"if",locations:[{start:{line:154,column:8},end:{line:156,column:9}},{start:{line:154,column:8},end:{line:156,column:9}}],line:154},"48":{loc:{start:{line:159,column:8},end:{line:164,column:9}},type:"if",locations:[{start:{line:159,column:8},end:{line:164,column:9}},{start:{line:159,column:8},end:{line:164,column:9}}],line:159},"49":{loc:{start:{line:259,column:8},end:{line:261,column:9}},type:"if",locations:[{start:{line:259,column:8},end:{line:261,column:9}},{start:{line:259,column:8},end:{line:261,column:9}}],line:259}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0,"93":0,"94":0,"95":0,"96":0,"97":0,"98":0,"99":0,"100":0,"101":0,"102":0,"103":0,"104":0,"105":0,"106":0,"107":0,"108":0,"109":0,"110":0,"111":0,"112":0,"113":0,"114":0,"115":0,"116":0,"117":0,"118":0,"119":0,"120":0,"121":0,"122":0,"123":0,"124":0,"125":0,"126":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0},b:{"0":[0,0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0,0],"10":[0,0,0],"11":[0,0],"12":[0,0],"13":[0,0],"14":[0,0],"15":[0,0],"16":[0,0],"17":[0,0],"18":[0,0],"19":[0,0],"20":[0,0],"21":[0,0],"22":[0,0],"23":[0,0],"24":[0,0],"25":[0,0],"26":[0,0],"27":[0,0],"28":[0,0],"29":[0,0],"30":[0,0],"31":[0,0],"32":[0,0],"33":[0,0],"34":[0,0],"35":[0,0],"36":[0,0],"37":[0,0],"38":[0,0],"39":[0,0],"40":[0,0],"41":[0,0],"42":[0,0],"43":[0,0],"44":[0,0],"45":[0,0],"46":[0,0],"47":[0,0],"48":[0,0],"49":[0,0]},inputSourceMap:{version:3,file:"/home/prateeti/SOFIE-private-ledger/vulnerability-private-data-collections/src/vulnerability-contract.ts",sources:["/home/prateeti/SOFIE-private-ledger/vulnerability-private-data-collections/src/vulnerability-contract.ts"],names:[],mappings:"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",sourcesContent:["/*\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport crypto = require('crypto');\nimport { Context, Contract, Info, Returns, Transaction } from 'fabric-contract-api';\nimport { contracts } from '.';\nimport { Vulnerability } from './vulnerability';\nconst myCollectionName: string = 'CollectionOne';\n\n\n// data-receiver.ts\ntype InterledgerEventAccepted = {\n    Nonce: string;\n};\n\ntype InterledgerEventRejected = {\n    Nonce: string;\n};\n\n\ntype DataItem = {\n    Nonce: string;\n    Data: string;\n};\ninterface InterledgerReceiver{\n    interledgerReceive(ctx: Context, nonce: string, secretData: string):Promise<string>;// Function to receive data from Interledger\n}\n// data-sender.ts\ntype InterledgerEventSending = {\n    Id: string;\n    Data: string;\n};\n\ninterface InterledgerSender{\n    interledgerCommit(ctx: Context):Error;\n    interledgerAbort(ctx: Context):Error;\n}\n\n@Info({title: 'VulnerabilityContract', description: 'My Private Data Smart Contract' })\nexport class VulnerabilityContract extends Contract implements InterledgerReceiver, InterledgerSender{\n\n    @Transaction(false)\n    @Returns('boolean')\n    public async vulnerabilityExists(ctx: Context, vulnerabilityId: string): Promise<boolean> {\n        const buffer: Buffer = await ctx.stub.getPrivateDataHash(myCollectionName, vulnerabilityId);\n        return (!!buffer && buffer.length > 0);\n    }\n\n    @Transaction()\n    public async createVulnerability(ctx: Context, vulnerabilityId: string): Promise<void> {\n        const exists: boolean = await this.vulnerabilityExists(ctx, vulnerabilityId);\n        if (exists) {\n            throw new Error(`The asset vulnerability details ${vulnerabilityId} already exists`);\n        }\n\n        const privateAsset: Vulnerability = new Vulnerability();\n\n        const transientData: Map<string, Buffer> = ctx.stub.getTransient();\n\n        if(transientData.size === 0) {\n            throw new Error('The keys were not specified in transient data. Please try again.');\n        }\n        if (transientData.size === 0 || !transientData.has('vendorID')) {\n            throw new Error('The vendorID key was not specified in transient data. Please try again.');\n        }\n        privateAsset.vendorID = transientData.get('vendorID').toString('utf8');\n\n        if (transientData.size === 0 || !transientData.has('vendorName')) {\n            throw new Error('The vendorName key was not specified in transient data. Please try again.');\n        }\n        privateAsset.vendorName = transientData.get('vendorName').toString('utf8');\n\n        if (transientData.size === 0 || !transientData.has('productName')) {\n            throw new Error('The productName key was not specified in transient data. Please try again.');\n        }\n        privateAsset.productName = transientData.get('productName').toString('utf8');\n\n        if (transientData.size === 0 || !transientData.has('vulnerabilityType')) {\n            throw new Error('The vulnerabilityType key was not specified in transient data. Please try again.');\n        }\n        privateAsset.vulnerabilityType = transientData.get('vulnerabilityType').toString('utf8');\n\n        if (transientData.size === 0 || !transientData.has('vulnerabilitySeverity')) {\n            throw new Error('The vulnerabilitySeverity key was not specified in transient data. Please try again.');\n        }\n        privateAsset.vulnerabilitySeverity = transientData.get('vulnerabilitySeverity').toString('utf8');\n\n        /* if (transientData.size === 0 || !transientData.has('patchState')) {\n            throw new Error('The patchState key was not specified in transient data. Please try again.');\n        }\n        privateAsset.patchState = transientData.get('patchState').toString('utf8');*/\n        if (transientData.size === 0 || !transientData.has('gracePeriod')) {\n            throw new Error('The gracePeriod key was not specified in transient data. Please try again.');\n        }\n        privateAsset.gracePeriod = transientData.get('gracePeriod').toString('utf8');\n\n        if (transientData.size === 0 || !transientData.has('bountyAmount')) {\n            throw new Error('The bountyAmount key was not specified in transient data. Please try again.');\n        }\n        privateAsset.bountyAmount = transientData.get('bountyAmount').toString('utf8');\n\n        await ctx.stub.putPrivateData(myCollectionName, vulnerabilityId, Buffer.from(JSON.stringify(privateAsset)));\n    }\n\n    @Transaction(false)\n    @Returns('Vulnerability')\n    public async readVulnerability(ctx: Context, vulnerabilityId: string): Promise<string> {\n        const exists: boolean = await this.vulnerabilityExists(ctx, vulnerabilityId);\n        if (!exists) {\n            throw new Error(`The asset vulnerability ${vulnerabilityId} does not exist`);\n        }\n\n        let privateDataString: string;\n        const privateData: Buffer = await ctx.stub.getPrivateData(myCollectionName, vulnerabilityId);\n\n        privateDataString = JSON.parse(privateData.toString());\n        return privateDataString;\n    }\n\n    /* @Transaction()\n    public async updateVulnerability(ctx: Context, vulnerabilityId: string, patchSt: string): Promise<void> {\n        const exists: boolean = await this.vulnerabilityExists(ctx, vulnerabilityId);\n        if (!exists) {\n            throw new Error(`The asset vulnerability ${vulnerabilityId} does not exist`);\n        }\n        // const privateData: Buffer = await ctx.stub.getPrivateData(myCollectionName, vulnerabilityId);\n        // let privateDataString: string;\n        // privateDataString = JSON.parse(privateData.toString());\n        let privateAsset: Vulnerability = new Vulnerability();\n        const result = this.readVulnerability(ctx, vulnerabilityId);\n        privateAsset=JSON.parse(JSON.stringify(result));\n\n        // const transientData: Map<string, Buffer> = ctx.stub.getTransient();\n        // if (transientData.size === 0 || !transientData.has('privateValue')) {\n        // throw new Error('The privateValue key was not specified in transient data. Please try again.');\n        // }\n        // privateAsset.privateValue = transientData.get('privateValue').toString('utf8');\n        privateAsset.patchState=patchSt;\n        console.log(privateAsset);\n        await ctx.stub.putPrivateData(myCollectionName, vulnerabilityId, Buffer.from(JSON.stringify(privateAsset)));\n    }*/\n\n    @Transaction()\n    public async updateVulnerability(ctx: Context, vulnerabilityId: string): Promise<void> {\n        const exists: boolean = await this.vulnerabilityExists(ctx, vulnerabilityId);\n        if (!exists) {\n            throw new Error(`The asset vulnerability ${vulnerabilityId} does not exist`);\n        }\n        const privateAsset: Vulnerability = new Vulnerability();\n        const transientData: Map<string, Buffer> = ctx.stub.getTransient();\n        if (transientData.size === 0 || !transientData.has('vendorID')) {\n             throw new Error('The vendorID key was not specified in transient data. Please try again.');\n        }\n        if (transientData.size === 0 || !transientData.has('vendorName')) {\n             throw new Error('The vendorName key was not specified in transient data. Please try again.');\n        }\n        if (transientData.size === 0 || !transientData.has('productName')) {\n            throw new Error('The productName key was not specified in transient data. Please try again.');\n        }\n        if (transientData.size === 0 || !transientData.has('vulnerabilityType')) {\n            throw new Error('The vulnerabilityType key was not specified in transient data. Please try again.');\n        }\n        if (transientData.size === 0 || !transientData.has('vulnerabilitySeverity')) {\n            throw new Error('The vulnerabilitySeverity key was not specified in transient data. Please try again.');\n        }\n        /* if (transientData.size === 0 || !transientData.has('patchState')) {\n            throw new Error('The patchState key was not specified in transient data. Please try again.');\n        }*/\n        if (transientData.size === 0 || !transientData.has('gracePeriod')) {\n            throw new Error('The gracePeriod key was not specified in transient data. Please try again.');\n        }\n        if (transientData.size === 0 || !transientData.has('bountyAmount')) {\n            throw new Error('The bountyAmount key was not specified in transient data. Please try again.');\n        }\n\n        privateAsset.vendorID = transientData.get('vendorID').toString('utf8');\n        privateAsset.vendorName = transientData.get('vendorName').toString('utf8');\n        privateAsset.productName = transientData.get('productName').toString('utf8');\n        privateAsset.vulnerabilityType = transientData.get('vulnerabilityType').toString('utf8');\n        privateAsset.vulnerabilitySeverity = transientData.get('vulnerabilitySeverity').toString('utf8');\n        // privateAsset.patchState = transientData.get('patchState').toString('utf8');\n        privateAsset.gracePeriod = transientData.get('gracePeriod').toString('utf8');\n        privateAsset.bountyAmount = transientData.get('bountyAmount').toString('utf8');\n        console.log(privateAsset);\n        await ctx.stub.putPrivateData(myCollectionName, vulnerabilityId, Buffer.from(JSON.stringify(privateAsset)));\n    }\n\n\n    @Transaction()\n    public async deleteVulnerability(ctx: Context, vulnerabilityId: string): Promise<void> {\n        const exists: boolean = await this.vulnerabilityExists(ctx, vulnerabilityId);\n        if (!exists) {\n            throw new Error(`The asset vulnerability ${vulnerabilityId} does not exist`);\n        }\n        await ctx.stub.deletePrivateData(myCollectionName, vulnerabilityId);\n    }\n\n    @Transaction()\n    public async verifyVulnerability(ctx: Context, vulnerabilityId: string, objectToVerify: Vulnerability): Promise<boolean> {\n        // Convert user provided object into a hash\n        const hashToVerify: string = crypto.createHash('sha256').update(JSON.stringify(objectToVerify)).digest('hex');\n        const pdHashBytes: Buffer = await ctx.stub.getPrivateDataHash(myCollectionName, vulnerabilityId);\n        if (pdHashBytes.length === 0) {\n            throw new Error(`No private data hash with the Key: ${vulnerabilityId}`);\n        }\n\n        const actualHash: string = pdHashBytes.toString('hex');\n\n        // Compare the hash calculated (from object provided) and the hash stored on public ledger\n        if (hashToVerify === actualHash) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n\n    // data-sender.ts\n\n    @Transaction(false)\n    interledgerAbort(ctx:Context): Error{\n        return null;\n    }\n\n    @Transaction(false)\n    interledgerCommit(ctx:Context): Error{\n        return null;\n    }\n\n    @Transaction()\n    public async emitData(ctx:Context, data:Promise<string>): Promise<Error>{\n\n        const id = JSON.stringify(ctx.stub.getState('id'));\n        let id1 = parseInt(id,10);\n        id1+=1;\n        const iles : InterledgerEventSending ={\n            Id : JSON.stringify(id1),\n            Data: JSON.stringify(data)\n        };\n\n        await ctx.stub.putState('id', Buffer.from(JSON.stringify(id1)));\n        // ctx.stub.setEvent('InterledgerEventSending', Buffer.from(JSON.stringify(iles)));\n\n        return null;\n    }\n\n    // data-receiver.ts\n\n    /* @Transaction()\n    @Returns('Vulnerability')\n    public async interledgerReceive(ctx: Context,nonceString: string, secretData: string):Promise<string> {\n\n        // const args = this.newMethod(secretID);\n        // let nonce_bytes=JSON.stringify(args[0]);\n        // let secretID = args[1];\n        const middle = Math.ceil(secretData.length / 2);\n        const patchState = secretData.slice(0, middle);\n        const vulnerabilityId = secretData.slice(middle);\n        const res = this.vulnerabilityExists(ctx, vulnerabilityId);\n\n        if(!res)\n        {\n            throw new Error('Invalid Secret');\n        }\n        const lastChar = patchState.substr(patchState.length-1);\n\n        // let returnString:string = JSON.stringify(result);\n\n        if(lastChar==='1')\n        {\n            // result=JSON.parse((JSON.stringify(result)).replace('\"patchState\":\"Not Patched\"','\"patchState\":\"Patched\"'));\n            const ctx2: Context = this.createContext();\n            this.updateVulnerability(ctx2, vulnerabilityId,'Patched');\n            // ctx.stub.putPrivateData(myCollectionName, vulnerabilityId, Buffer.from(JSON.stringify(returnString))\n        }\n        // console.log(result);\n        // console.dir(result.payload.toString('utf8'));\n        // console.log(result.toString());\n        // const returnValue: string = VulnerabilityContract.upload(result.toString());\n        // const nonce = parseInt(nonceString, 64);\n        let result = this.readVulnerability(ctx, vulnerabilityId);\n        if(lastChar==='1')\n        {\n            result=JSON.parse((JSON.stringify(result)).replace('\"patchState\":\"Not Patched\"','\"patchState\":\"Patched\"'));\n        }\n        const nonce = nonceString;\n\n        const dataItem : DataItem ={\n            Nonce : nonce,\n            Data: vulnerabilityId\n        };\n\n        // let items: Array<DataItem>;\n        // items.push(dataItem);\n\n        ctx.stub.putState('items',Buffer.from(JSON.stringify(dataItem)));\n        ctx.stub.setEvent('InterledgerEventAccepted', Buffer.from(JSON.stringify(nonce)));\n\n        this.emitData(ctx, result);\n\n        return result;\n\n    }\n\n    @Transaction()\n    public async updatePatchState(ctx:Context, vulnerabilityId: string, patchSt: string):Promise<void> {\n\n        const exists: boolean = await this.vulnerabilityExists(ctx, vulnerabilityId);\n        if (!exists) {\n            throw new Error(`The asset vulnerability ${vulnerabilityId} does not exist`);\n        }\n        let privateAsset: Vulnerability = new Vulnerability();\n        privateAsset.patchState=patchSt;\n        console.log(privateAsset);\n        await ctx.stub.putPrivateData(myCollectionName, vulnerabilityId, Buffer.from(JSON.stringify(privateAsset)));\n    }*/\n\n    @Transaction()\n    @Returns('Vulnerability')\n    public async interledgerReceive(ctx: Context,nonceString: string, secretData: string):Promise<string> {\n\n        // const middle = Math.ceil(secretData.length / 2);\n        // const patchState = secretData.slice(0, middle);\n        const vulnerabilityId = secretData;\n        const res = this.vulnerabilityExists(ctx, vulnerabilityId);\n\n        if(!res)\n        {\n            throw new Error('Invalid Secret');\n        }\n        // const lastChar = patchState.substr(patchState.length-1);\n\n        // let returnString:string = JSON.stringify(result);\n\n        /* if(lastChar==='1')\n        {\n            const transientMap: Map<string, Buffer> = new Map<string, Buffer>();\n            const asset: Vulnerability = JSON.parse(await this.readVulnerability(ctx, vulnerabilityId));\n            transientMap.set('vendorID', Buffer.from(asset.vendorID));\n            transientMap.set('vendorName', Buffer.from(asset.vendorName));\n            transientMap.set('productName', Buffer.from(asset.productName));\n            transientMap.set('vulnerabilityType', Buffer.from(asset.vulnerabilityType));\n            transientMap.set('vulnerabilitySeverity', Buffer.from(asset.vulnerabilitySeverity));\n            transientMap.set('patchState', Buffer.from('Patched'));\n            transientMap.set('bountyAmount', Buffer.from(asset.bountyAmount));\n\n            ctx.stub.getTransient.returns(transientMap);\n            await this.updateVulnerability(ctx, '001');\n\n        }*/\n        // let result:string;\n        const result = this.readVulnerability(ctx, vulnerabilityId);\n        /* if(lastChar === '1'){\n            console.log(`Please update patchState to Patched for vulnerability: ${vulnerabilityId}`);\n            // this.updatePatchState(ctx,vulnerabilityId,\"Patched\");\n            returnValue = result.toString().replace('Not Patched','Patched');\n            console.log(returnValue);\n        }*/\n\n        const nonce = nonceString;\n        const dataItem : DataItem = {\n            Nonce : nonce,\n            Data: vulnerabilityId\n        };\n\n        // let items: Array<DataItem>;\n        // items.push(dataItem);\n\n        await ctx.stub.putState('items',Buffer.from(JSON.stringify(dataItem)));\n        // ctx.stub.setEvent('InterledgerEventAccepted', Buffer.from(JSON.stringify(nonce)));\n\n        this.emitData(ctx, result);\n\n        return result;\n\n    }\n\n\n}\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"d6328b3f9050082e868490ea43780965e91f16dc"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];cov_t48xk83u=function(){return actualCoverage;};return actualCoverage;}cov_t48xk83u();var __decorate=(cov_t48xk83u().s[0]++,(cov_t48xk83u().b[0][0]++,this)&&(cov_t48xk83u().b[0][1]++,this.__decorate)||(cov_t48xk83u().b[0][2]++,function(decorators,target,key,desc){cov_t48xk83u().f[0]++;var c=(cov_t48xk83u().s[1]++,arguments.length),r=(cov_t48xk83u().s[2]++,c<3?(cov_t48xk83u().b[1][0]++,target):(cov_t48xk83u().b[1][1]++,desc===null?(cov_t48xk83u().b[2][0]++,desc=Object.getOwnPropertyDescriptor(target,key)):(cov_t48xk83u().b[2][1]++,desc))),d;cov_t48xk83u().s[3]++;if((cov_t48xk83u().b[4][0]++,typeof Reflect==="object")&&(cov_t48xk83u().b[4][1]++,typeof Reflect.decorate==="function")){cov_t48xk83u().b[3][0]++;cov_t48xk83u().s[4]++;r=Reflect.decorate(decorators,target,key,desc);}else{cov_t48xk83u().b[3][1]++;cov_t48xk83u().s[5]++;for(var i=(cov_t48xk83u().s[6]++,decorators.length-1);i>=0;i--){cov_t48xk83u().s[7]++;if(d=decorators[i]){cov_t48xk83u().b[5][0]++;cov_t48xk83u().s[8]++;r=(cov_t48xk83u().b[6][0]++,c<3?(cov_t48xk83u().b[7][0]++,d(r)):(cov_t48xk83u().b[7][1]++,c>3?(cov_t48xk83u().b[8][0]++,d(target,key,r)):(cov_t48xk83u().b[8][1]++,d(target,key))))||(cov_t48xk83u().b[6][1]++,r);}else{cov_t48xk83u().b[5][1]++;}}}cov_t48xk83u().s[9]++;return(cov_t48xk83u().b[9][0]++,c>3)&&(cov_t48xk83u().b[9][1]++,r)&&(cov_t48xk83u().b[9][2]++,Object.defineProperty(target,key,r)),r;}));var __metadata=(cov_t48xk83u().s[10]++,(cov_t48xk83u().b[10][0]++,this)&&(cov_t48xk83u().b[10][1]++,this.__metadata)||(cov_t48xk83u().b[10][2]++,function(k,v){cov_t48xk83u().f[1]++;cov_t48xk83u().s[11]++;if((cov_t48xk83u().b[12][0]++,typeof Reflect==="object")&&(cov_t48xk83u().b[12][1]++,typeof Reflect.metadata==="function")){cov_t48xk83u().b[11][0]++;cov_t48xk83u().s[12]++;return Reflect.metadata(k,v);}else{cov_t48xk83u().b[11][1]++;}}));cov_t48xk83u().s[13]++;Object.defineProperty(exports,"__esModule",{value:true});cov_t48xk83u().s[14]++;exports.VulnerabilityContract=void 0;const crypto=(cov_t48xk83u().s[15]++,require("crypto"));const fabric_contract_api_1=(cov_t48xk83u().s[16]++,require("fabric-contract-api"));const vulnerability_1=(cov_t48xk83u().s[17]++,require("./vulnerability"));const myCollectionName=(cov_t48xk83u().s[18]++,'CollectionOne');cov_t48xk83u().s[19]++;let VulnerabilityContract=class VulnerabilityContract extends fabric_contract_api_1.Contract{async vulnerabilityExists(ctx,vulnerabilityId){cov_t48xk83u().f[2]++;const buffer=(cov_t48xk83u().s[20]++,await ctx.stub.getPrivateDataHash(myCollectionName,vulnerabilityId));cov_t48xk83u().s[21]++;return(cov_t48xk83u().b[13][0]++,!!buffer)&&(cov_t48xk83u().b[13][1]++,buffer.length>0);}async createVulnerability(ctx,vulnerabilityId){cov_t48xk83u().f[3]++;const exists=(cov_t48xk83u().s[22]++,await this.vulnerabilityExists(ctx,vulnerabilityId));cov_t48xk83u().s[23]++;if(exists){cov_t48xk83u().b[14][0]++;cov_t48xk83u().s[24]++;throw new Error(`The asset vulnerability details ${vulnerabilityId} already exists`);}else{cov_t48xk83u().b[14][1]++;}const privateAsset=(cov_t48xk83u().s[25]++,new vulnerability_1.Vulnerability());const transientData=(cov_t48xk83u().s[26]++,ctx.stub.getTransient());cov_t48xk83u().s[27]++;if(transientData.size===0){cov_t48xk83u().b[15][0]++;cov_t48xk83u().s[28]++;throw new Error('The keys were not specified in transient data. Please try again.');}else{cov_t48xk83u().b[15][1]++;}cov_t48xk83u().s[29]++;if((cov_t48xk83u().b[17][0]++,transientData.size===0)||(cov_t48xk83u().b[17][1]++,!transientData.has('vendorID'))){cov_t48xk83u().b[16][0]++;cov_t48xk83u().s[30]++;throw new Error('The vendorID key was not specified in transient data. Please try again.');}else{cov_t48xk83u().b[16][1]++;}cov_t48xk83u().s[31]++;privateAsset.vendorID=transientData.get('vendorID').toString('utf8');cov_t48xk83u().s[32]++;if((cov_t48xk83u().b[19][0]++,transientData.size===0)||(cov_t48xk83u().b[19][1]++,!transientData.has('vendorName'))){cov_t48xk83u().b[18][0]++;cov_t48xk83u().s[33]++;throw new Error('The vendorName key was not specified in transient data. Please try again.');}else{cov_t48xk83u().b[18][1]++;}cov_t48xk83u().s[34]++;privateAsset.vendorName=transientData.get('vendorName').toString('utf8');cov_t48xk83u().s[35]++;if((cov_t48xk83u().b[21][0]++,transientData.size===0)||(cov_t48xk83u().b[21][1]++,!transientData.has('productName'))){cov_t48xk83u().b[20][0]++;cov_t48xk83u().s[36]++;throw new Error('The productName key was not specified in transient data. Please try again.');}else{cov_t48xk83u().b[20][1]++;}cov_t48xk83u().s[37]++;privateAsset.productName=transientData.get('productName').toString('utf8');cov_t48xk83u().s[38]++;if((cov_t48xk83u().b[23][0]++,transientData.size===0)||(cov_t48xk83u().b[23][1]++,!transientData.has('vulnerabilityType'))){cov_t48xk83u().b[22][0]++;cov_t48xk83u().s[39]++;throw new Error('The vulnerabilityType key was not specified in transient data. Please try again.');}else{cov_t48xk83u().b[22][1]++;}cov_t48xk83u().s[40]++;privateAsset.vulnerabilityType=transientData.get('vulnerabilityType').toString('utf8');cov_t48xk83u().s[41]++;if((cov_t48xk83u().b[25][0]++,transientData.size===0)||(cov_t48xk83u().b[25][1]++,!transientData.has('vulnerabilitySeverity'))){cov_t48xk83u().b[24][0]++;cov_t48xk83u().s[42]++;throw new Error('The vulnerabilitySeverity key was not specified in transient data. Please try again.');}else{cov_t48xk83u().b[24][1]++;}cov_t48xk83u().s[43]++;privateAsset.vulnerabilitySeverity=transientData.get('vulnerabilitySeverity').toString('utf8');/* if (transientData.size === 0 || !transientData.has('patchState')) {
            throw new Error('The patchState key was not specified in transient data. Please try again.');
        }
        privateAsset.patchState = transientData.get('patchState').toString('utf8');*/cov_t48xk83u().s[44]++;if((cov_t48xk83u().b[27][0]++,transientData.size===0)||(cov_t48xk83u().b[27][1]++,!transientData.has('gracePeriod'))){cov_t48xk83u().b[26][0]++;cov_t48xk83u().s[45]++;throw new Error('The gracePeriod key was not specified in transient data. Please try again.');}else{cov_t48xk83u().b[26][1]++;}cov_t48xk83u().s[46]++;privateAsset.gracePeriod=transientData.get('gracePeriod').toString('utf8');cov_t48xk83u().s[47]++;if((cov_t48xk83u().b[29][0]++,transientData.size===0)||(cov_t48xk83u().b[29][1]++,!transientData.has('bountyAmount'))){cov_t48xk83u().b[28][0]++;cov_t48xk83u().s[48]++;throw new Error('The bountyAmount key was not specified in transient data. Please try again.');}else{cov_t48xk83u().b[28][1]++;}cov_t48xk83u().s[49]++;privateAsset.bountyAmount=transientData.get('bountyAmount').toString('utf8');cov_t48xk83u().s[50]++;await ctx.stub.putPrivateData(myCollectionName,vulnerabilityId,Buffer.from(JSON.stringify(privateAsset)));}async readVulnerability(ctx,vulnerabilityId){cov_t48xk83u().f[4]++;const exists=(cov_t48xk83u().s[51]++,await this.vulnerabilityExists(ctx,vulnerabilityId));cov_t48xk83u().s[52]++;if(!exists){cov_t48xk83u().b[30][0]++;cov_t48xk83u().s[53]++;throw new Error(`The asset vulnerability ${vulnerabilityId} does not exist`);}else{cov_t48xk83u().b[30][1]++;}let privateDataString;const privateData=(cov_t48xk83u().s[54]++,await ctx.stub.getPrivateData(myCollectionName,vulnerabilityId));cov_t48xk83u().s[55]++;privateDataString=JSON.parse(privateData.toString());cov_t48xk83u().s[56]++;return privateDataString;}/* @Transaction()
    public async updateVulnerability(ctx: Context, vulnerabilityId: string, patchSt: string): Promise<void> {
        const exists: boolean = await this.vulnerabilityExists(ctx, vulnerabilityId);
        if (!exists) {
            throw new Error(`The asset vulnerability ${vulnerabilityId} does not exist`);
        }
        // const privateData: Buffer = await ctx.stub.getPrivateData(myCollectionName, vulnerabilityId);
        // let privateDataString: string;
        // privateDataString = JSON.parse(privateData.toString());
        let privateAsset: Vulnerability = new Vulnerability();
        const result = this.readVulnerability(ctx, vulnerabilityId);
        privateAsset=JSON.parse(JSON.stringify(result));

        // const transientData: Map<string, Buffer> = ctx.stub.getTransient();
        // if (transientData.size === 0 || !transientData.has('privateValue')) {
        // throw new Error('The privateValue key was not specified in transient data. Please try again.');
        // }
        // privateAsset.privateValue = transientData.get('privateValue').toString('utf8');
        privateAsset.patchState=patchSt;
        console.log(privateAsset);
        await ctx.stub.putPrivateData(myCollectionName, vulnerabilityId, Buffer.from(JSON.stringify(privateAsset)));
    }*/async updateVulnerability(ctx,vulnerabilityId){cov_t48xk83u().f[5]++;const exists=(cov_t48xk83u().s[57]++,await this.vulnerabilityExists(ctx,vulnerabilityId));cov_t48xk83u().s[58]++;if(!exists){cov_t48xk83u().b[31][0]++;cov_t48xk83u().s[59]++;throw new Error(`The asset vulnerability ${vulnerabilityId} does not exist`);}else{cov_t48xk83u().b[31][1]++;}const privateAsset=(cov_t48xk83u().s[60]++,new vulnerability_1.Vulnerability());const transientData=(cov_t48xk83u().s[61]++,ctx.stub.getTransient());cov_t48xk83u().s[62]++;if((cov_t48xk83u().b[33][0]++,transientData.size===0)||(cov_t48xk83u().b[33][1]++,!transientData.has('vendorID'))){cov_t48xk83u().b[32][0]++;cov_t48xk83u().s[63]++;throw new Error('The vendorID key was not specified in transient data. Please try again.');}else{cov_t48xk83u().b[32][1]++;}cov_t48xk83u().s[64]++;if((cov_t48xk83u().b[35][0]++,transientData.size===0)||(cov_t48xk83u().b[35][1]++,!transientData.has('vendorName'))){cov_t48xk83u().b[34][0]++;cov_t48xk83u().s[65]++;throw new Error('The vendorName key was not specified in transient data. Please try again.');}else{cov_t48xk83u().b[34][1]++;}cov_t48xk83u().s[66]++;if((cov_t48xk83u().b[37][0]++,transientData.size===0)||(cov_t48xk83u().b[37][1]++,!transientData.has('productName'))){cov_t48xk83u().b[36][0]++;cov_t48xk83u().s[67]++;throw new Error('The productName key was not specified in transient data. Please try again.');}else{cov_t48xk83u().b[36][1]++;}cov_t48xk83u().s[68]++;if((cov_t48xk83u().b[39][0]++,transientData.size===0)||(cov_t48xk83u().b[39][1]++,!transientData.has('vulnerabilityType'))){cov_t48xk83u().b[38][0]++;cov_t48xk83u().s[69]++;throw new Error('The vulnerabilityType key was not specified in transient data. Please try again.');}else{cov_t48xk83u().b[38][1]++;}cov_t48xk83u().s[70]++;if((cov_t48xk83u().b[41][0]++,transientData.size===0)||(cov_t48xk83u().b[41][1]++,!transientData.has('vulnerabilitySeverity'))){cov_t48xk83u().b[40][0]++;cov_t48xk83u().s[71]++;throw new Error('The vulnerabilitySeverity key was not specified in transient data. Please try again.');}else{cov_t48xk83u().b[40][1]++;}/* if (transientData.size === 0 || !transientData.has('patchState')) {
            throw new Error('The patchState key was not specified in transient data. Please try again.');
        }*/cov_t48xk83u().s[72]++;if((cov_t48xk83u().b[43][0]++,transientData.size===0)||(cov_t48xk83u().b[43][1]++,!transientData.has('gracePeriod'))){cov_t48xk83u().b[42][0]++;cov_t48xk83u().s[73]++;throw new Error('The gracePeriod key was not specified in transient data. Please try again.');}else{cov_t48xk83u().b[42][1]++;}cov_t48xk83u().s[74]++;if((cov_t48xk83u().b[45][0]++,transientData.size===0)||(cov_t48xk83u().b[45][1]++,!transientData.has('bountyAmount'))){cov_t48xk83u().b[44][0]++;cov_t48xk83u().s[75]++;throw new Error('The bountyAmount key was not specified in transient data. Please try again.');}else{cov_t48xk83u().b[44][1]++;}cov_t48xk83u().s[76]++;privateAsset.vendorID=transientData.get('vendorID').toString('utf8');cov_t48xk83u().s[77]++;privateAsset.vendorName=transientData.get('vendorName').toString('utf8');cov_t48xk83u().s[78]++;privateAsset.productName=transientData.get('productName').toString('utf8');cov_t48xk83u().s[79]++;privateAsset.vulnerabilityType=transientData.get('vulnerabilityType').toString('utf8');cov_t48xk83u().s[80]++;privateAsset.vulnerabilitySeverity=transientData.get('vulnerabilitySeverity').toString('utf8');// privateAsset.patchState = transientData.get('patchState').toString('utf8');
cov_t48xk83u().s[81]++;privateAsset.gracePeriod=transientData.get('gracePeriod').toString('utf8');cov_t48xk83u().s[82]++;privateAsset.bountyAmount=transientData.get('bountyAmount').toString('utf8');cov_t48xk83u().s[83]++;console.log(privateAsset);cov_t48xk83u().s[84]++;await ctx.stub.putPrivateData(myCollectionName,vulnerabilityId,Buffer.from(JSON.stringify(privateAsset)));}async deleteVulnerability(ctx,vulnerabilityId){cov_t48xk83u().f[6]++;const exists=(cov_t48xk83u().s[85]++,await this.vulnerabilityExists(ctx,vulnerabilityId));cov_t48xk83u().s[86]++;if(!exists){cov_t48xk83u().b[46][0]++;cov_t48xk83u().s[87]++;throw new Error(`The asset vulnerability ${vulnerabilityId} does not exist`);}else{cov_t48xk83u().b[46][1]++;}cov_t48xk83u().s[88]++;await ctx.stub.deletePrivateData(myCollectionName,vulnerabilityId);}async verifyVulnerability(ctx,vulnerabilityId,objectToVerify){cov_t48xk83u().f[7]++;// Convert user provided object into a hash
const hashToVerify=(cov_t48xk83u().s[89]++,crypto.createHash('sha256').update(JSON.stringify(objectToVerify)).digest('hex'));const pdHashBytes=(cov_t48xk83u().s[90]++,await ctx.stub.getPrivateDataHash(myCollectionName,vulnerabilityId));cov_t48xk83u().s[91]++;if(pdHashBytes.length===0){cov_t48xk83u().b[47][0]++;cov_t48xk83u().s[92]++;throw new Error(`No private data hash with the Key: ${vulnerabilityId}`);}else{cov_t48xk83u().b[47][1]++;}const actualHash=(cov_t48xk83u().s[93]++,pdHashBytes.toString('hex'));// Compare the hash calculated (from object provided) and the hash stored on public ledger
cov_t48xk83u().s[94]++;if(hashToVerify===actualHash){cov_t48xk83u().b[48][0]++;cov_t48xk83u().s[95]++;return true;}else{cov_t48xk83u().b[48][1]++;cov_t48xk83u().s[96]++;return false;}}// data-sender.ts
interledgerAbort(ctx){cov_t48xk83u().f[8]++;cov_t48xk83u().s[97]++;return null;}interledgerCommit(ctx){cov_t48xk83u().f[9]++;cov_t48xk83u().s[98]++;return null;}async emitData(ctx,data){cov_t48xk83u().f[10]++;const id=(cov_t48xk83u().s[99]++,JSON.stringify(ctx.stub.getState('id')));let id1=(cov_t48xk83u().s[100]++,parseInt(id,10));cov_t48xk83u().s[101]++;id1+=1;const iles=(cov_t48xk83u().s[102]++,{Id:JSON.stringify(id1),Data:JSON.stringify(data)});cov_t48xk83u().s[103]++;await ctx.stub.putState('id',Buffer.from(JSON.stringify(id1)));// ctx.stub.setEvent('InterledgerEventSending', Buffer.from(JSON.stringify(iles)));
cov_t48xk83u().s[104]++;return null;}// data-receiver.ts
/* @Transaction()
    @Returns('Vulnerability')
    public async interledgerReceive(ctx: Context,nonceString: string, secretData: string):Promise<string> {

        // const args = this.newMethod(secretID);
        // let nonce_bytes=JSON.stringify(args[0]);
        // let secretID = args[1];
        const middle = Math.ceil(secretData.length / 2);
        const patchState = secretData.slice(0, middle);
        const vulnerabilityId = secretData.slice(middle);
        const res = this.vulnerabilityExists(ctx, vulnerabilityId);

        if(!res)
        {
            throw new Error('Invalid Secret');
        }
        const lastChar = patchState.substr(patchState.length-1);

        // let returnString:string = JSON.stringify(result);

        if(lastChar==='1')
        {
            // result=JSON.parse((JSON.stringify(result)).replace('"patchState":"Not Patched"','"patchState":"Patched"'));
            const ctx2: Context = this.createContext();
            this.updateVulnerability(ctx2, vulnerabilityId,'Patched');
            // ctx.stub.putPrivateData(myCollectionName, vulnerabilityId, Buffer.from(JSON.stringify(returnString))
        }
        // console.log(result);
        // console.dir(result.payload.toString('utf8'));
        // console.log(result.toString());
        // const returnValue: string = VulnerabilityContract.upload(result.toString());
        // const nonce = parseInt(nonceString, 64);
        let result = this.readVulnerability(ctx, vulnerabilityId);
        if(lastChar==='1')
        {
            result=JSON.parse((JSON.stringify(result)).replace('"patchState":"Not Patched"','"patchState":"Patched"'));
        }
        const nonce = nonceString;

        const dataItem : DataItem ={
            Nonce : nonce,
            Data: vulnerabilityId
        };

        // let items: Array<DataItem>;
        // items.push(dataItem);

        ctx.stub.putState('items',Buffer.from(JSON.stringify(dataItem)));
        ctx.stub.setEvent('InterledgerEventAccepted', Buffer.from(JSON.stringify(nonce)));

        this.emitData(ctx, result);

        return result;

    }

    @Transaction()
    public async updatePatchState(ctx:Context, vulnerabilityId: string, patchSt: string):Promise<void> {

        const exists: boolean = await this.vulnerabilityExists(ctx, vulnerabilityId);
        if (!exists) {
            throw new Error(`The asset vulnerability ${vulnerabilityId} does not exist`);
        }
        let privateAsset: Vulnerability = new Vulnerability();
        privateAsset.patchState=patchSt;
        console.log(privateAsset);
        await ctx.stub.putPrivateData(myCollectionName, vulnerabilityId, Buffer.from(JSON.stringify(privateAsset)));
    }*/async interledgerReceive(ctx,nonceString,secretData){cov_t48xk83u().f[11]++;// const middle = Math.ceil(secretData.length / 2);
// const patchState = secretData.slice(0, middle);
const vulnerabilityId=(cov_t48xk83u().s[105]++,secretData);const res=(cov_t48xk83u().s[106]++,this.vulnerabilityExists(ctx,vulnerabilityId));cov_t48xk83u().s[107]++;if(!res){cov_t48xk83u().b[49][0]++;cov_t48xk83u().s[108]++;throw new Error('Invalid Secret');}else{cov_t48xk83u().b[49][1]++;}// const lastChar = patchState.substr(patchState.length-1);
// let returnString:string = JSON.stringify(result);
/* if(lastChar==='1')
        {
            const transientMap: Map<string, Buffer> = new Map<string, Buffer>();
            const asset: Vulnerability = JSON.parse(await this.readVulnerability(ctx, vulnerabilityId));
            transientMap.set('vendorID', Buffer.from(asset.vendorID));
            transientMap.set('vendorName', Buffer.from(asset.vendorName));
            transientMap.set('productName', Buffer.from(asset.productName));
            transientMap.set('vulnerabilityType', Buffer.from(asset.vulnerabilityType));
            transientMap.set('vulnerabilitySeverity', Buffer.from(asset.vulnerabilitySeverity));
            transientMap.set('patchState', Buffer.from('Patched'));
            transientMap.set('bountyAmount', Buffer.from(asset.bountyAmount));

            ctx.stub.getTransient.returns(transientMap);
            await this.updateVulnerability(ctx, '001');

        }*/ // let result:string;
const result=(cov_t48xk83u().s[109]++,this.readVulnerability(ctx,vulnerabilityId));/* if(lastChar === '1'){
            console.log(`Please update patchState to Patched for vulnerability: ${vulnerabilityId}`);
            // this.updatePatchState(ctx,vulnerabilityId,"Patched");
            returnValue = result.toString().replace('Not Patched','Patched');
            console.log(returnValue);
        }*/const nonce=(cov_t48xk83u().s[110]++,nonceString);const dataItem=(cov_t48xk83u().s[111]++,{Nonce:nonce,Data:vulnerabilityId});// let items: Array<DataItem>;
// items.push(dataItem);
cov_t48xk83u().s[112]++;await ctx.stub.putState('items',Buffer.from(JSON.stringify(dataItem)));// ctx.stub.setEvent('InterledgerEventAccepted', Buffer.from(JSON.stringify(nonce)));
cov_t48xk83u().s[113]++;this.emitData(ctx,result);cov_t48xk83u().s[114]++;return result;}};cov_t48xk83u().s[115]++;__decorate([fabric_contract_api_1.Transaction(false),fabric_contract_api_1.Returns('boolean'),__metadata("design:type",Function),__metadata("design:paramtypes",[fabric_contract_api_1.Context,String]),__metadata("design:returntype",Promise)],VulnerabilityContract.prototype,"vulnerabilityExists",null);cov_t48xk83u().s[116]++;__decorate([fabric_contract_api_1.Transaction(),__metadata("design:type",Function),__metadata("design:paramtypes",[fabric_contract_api_1.Context,String]),__metadata("design:returntype",Promise)],VulnerabilityContract.prototype,"createVulnerability",null);cov_t48xk83u().s[117]++;__decorate([fabric_contract_api_1.Transaction(false),fabric_contract_api_1.Returns('Vulnerability'),__metadata("design:type",Function),__metadata("design:paramtypes",[fabric_contract_api_1.Context,String]),__metadata("design:returntype",Promise)],VulnerabilityContract.prototype,"readVulnerability",null);cov_t48xk83u().s[118]++;__decorate([fabric_contract_api_1.Transaction(),__metadata("design:type",Function),__metadata("design:paramtypes",[fabric_contract_api_1.Context,String]),__metadata("design:returntype",Promise)],VulnerabilityContract.prototype,"updateVulnerability",null);cov_t48xk83u().s[119]++;__decorate([fabric_contract_api_1.Transaction(),__metadata("design:type",Function),__metadata("design:paramtypes",[fabric_contract_api_1.Context,String]),__metadata("design:returntype",Promise)],VulnerabilityContract.prototype,"deleteVulnerability",null);cov_t48xk83u().s[120]++;__decorate([fabric_contract_api_1.Transaction(),__metadata("design:type",Function),__metadata("design:paramtypes",[fabric_contract_api_1.Context,String,vulnerability_1.Vulnerability]),__metadata("design:returntype",Promise)],VulnerabilityContract.prototype,"verifyVulnerability",null);cov_t48xk83u().s[121]++;__decorate([fabric_contract_api_1.Transaction(false),__metadata("design:type",Function),__metadata("design:paramtypes",[fabric_contract_api_1.Context]),__metadata("design:returntype",Error)],VulnerabilityContract.prototype,"interledgerAbort",null);cov_t48xk83u().s[122]++;__decorate([fabric_contract_api_1.Transaction(false),__metadata("design:type",Function),__metadata("design:paramtypes",[fabric_contract_api_1.Context]),__metadata("design:returntype",Error)],VulnerabilityContract.prototype,"interledgerCommit",null);cov_t48xk83u().s[123]++;__decorate([fabric_contract_api_1.Transaction(),__metadata("design:type",Function),__metadata("design:paramtypes",[fabric_contract_api_1.Context,Promise]),__metadata("design:returntype",Promise)],VulnerabilityContract.prototype,"emitData",null);cov_t48xk83u().s[124]++;__decorate([fabric_contract_api_1.Transaction(),fabric_contract_api_1.Returns('Vulnerability'),__metadata("design:type",Function),__metadata("design:paramtypes",[fabric_contract_api_1.Context,String,String]),__metadata("design:returntype",Promise)],VulnerabilityContract.prototype,"interledgerReceive",null);cov_t48xk83u().s[125]++;VulnerabilityContract=__decorate([fabric_contract_api_1.Info({title:'VulnerabilityContract',description:'My Private Data Smart Contract'})],VulnerabilityContract);cov_t48xk83u().s[126]++;exports.VulnerabilityContract=VulnerabilityContract;//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,