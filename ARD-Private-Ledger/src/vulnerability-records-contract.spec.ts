/*
 * SPDX-License-Identifier: Apache-2.0
 */

 // tslint:disable: no-unused-expression
import { Context } from 'fabric-contract-api';
import { ChaincodeStub, ClientIdentity } from 'fabric-shim';
import { VulnerabilityRecordsContract } from '.';

import * as chai from 'chai';
import * as chaiAsPromised from 'chai-as-promised';
import crypto = require('crypto');
import * as sinon from 'sinon';
import * as sinonChai from 'sinon-chai';
import winston = require('winston');

chai.should();
chai.use(chaiAsPromised);
chai.use(sinonChai);

class TestContext implements Context {
    public stub: sinon.SinonStubbedInstance<ChaincodeStub> = sinon.createStubInstance(ChaincodeStub);
    public clientIdentity: sinon.SinonStubbedInstance<ClientIdentity> = sinon.createStubInstance(ClientIdentity);
    public logging = {
        getLogger: sinon.stub().returns(sinon.createStubInstance(winston.createLogger().constructor)),
        setLevel: sinon.stub(),
    };
}

describe('VulnerabilityRecordsContract', () => {

    let contract: VulnerabilityRecordsContract;
    let ctx: TestContext;
    const myCollectionName: string = 'CollectionOne';
    console.log('*** Created Vulnerability Records with Secret - 1 ***');
    beforeEach(() => {
        contract = new VulnerabilityRecordsContract();
        ctx = new TestContext();
        ctx.stub.getPrivateData.withArgs(myCollectionName, '1').resolves(Buffer.from('{"vulnerabilityID":"1","vendorID":"1247","vendorName":"Mozilla","productName":"Firefox for Android","vulnerabilityType":"Security Bug","vulnerabilitySeverity":"High","vulnerabilityPath":"content:// URI","vulnerabilityDesc":"Local files exposed to attackers","gracePeriod":"120 days","approvedOn":"08-01-2020"}'));
        const hashToVerify = crypto.createHash('sha256').update('{"vulnerabilityID":"1","vendorID":"1247","vendorName":"Mozilla","productName":"Firefox for Android","vulnerabilityType":"Security Bug","vulnerabilitySeverity":"High","vulnerabilityPath":"content:// URI","vulnerabilityDesc":"Local files exposed to attackers","gracePeriod":"120 days","approvedOn":"08-01-2020"}').digest('hex');
        ctx.stub.getPrivateDataHash.withArgs(myCollectionName, '1').resolves(Buffer.from(hashToVerify, 'hex'));
    });

    describe('#vulnerabilityRecordsExists', () => {

        it('should return true for a vulnerability', async () => {
            console.log('*** Checking Existence of Vulnerability Records with Secret - 1 ***');
            await contract.vulnerabilityRecordsExists(ctx, '1').should.eventually.be.true;
        });

        it('should return false for a vulnerability that does not exist', async () => {
            console.log('*** Checking Existence of Vulnerability Records with Secret - 2 ***');
            await contract.vulnerabilityRecordsExists(ctx, '3').should.eventually.be.false;
        });
    });

    describe('#createVulnerabilityRecords', () => {
        it('should throw an error for a vulnerability details that already exists', async () => {
            console.log('*** Trying to create Vulnerability Records with Secret that already exists ***');
            await contract.createVulnerabilityRecords(ctx, '1').should.be.rejectedWith(/The asset vulnerability details 1 already exists/);
        });

        it('should throw an error if transient data is not provided when creating a vulnerability details', async () => {
            console.log('*** Trying to create Vulnerability Records with no data ***');
            const transientMap: Map<string, Buffer> = new Map<string, Buffer>();
            ctx.stub.getTransient.returns(transientMap);
            await contract.createVulnerabilityRecords(ctx, '2').should.be.rejectedWith('The keys were not specified in transient data. Please try again.');
        });
        console.log('*** Trying to create Vulnerability Records with missing fields ***');
        it('should throw an error if vulnerabilityID key is not in transient map', async () => {
            const transientMap: Map<string, Buffer> = new Map<string, Buffer>();
            transientMap.set('vulID', Buffer.from('0909'));
            transientMap.set('vendorID', Buffer.from('125'));
            transientMap.set('vendorName', Buffer.from('GitHub'));
            transientMap.set('productName', Buffer.from('Actions'));
            transientMap.set('vulnerabilityType', Buffer.from('Injection Attack'));
            transientMap.set('vulnerabilitySeverity', Buffer.from('Medium'));
            transientMap.set('vulnerabilityPath', Buffer.from('Project Zero'));
            transientMap.set('vulnerabilityDesc', Buffer.from('Design flaw gives hackers write access to repositories and reveal secrets'));
            transientMap.set('gracePeriod', Buffer.from('60 days'));
            transientMap.set('approvedOn', Buffer.from('09-07-2020'));
            ctx.stub.getTransient.returns(transientMap);
            await contract.createVulnerabilityRecords(ctx,'2').should.be.rejectedWith(`The vulnerabilityID key was not specified in transient data. Please try again.`);
        });
        it('should throw an error if vendorID key is not in transient map', async () => {
            const transientMap: Map<string, Buffer> = new Map<string, Buffer>();
            transientMap.set('vulnerabilityID', Buffer.from('2'));
            transientMap.set('vendID', Buffer.from('125'));
            transientMap.set('vendorName', Buffer.from('GitHub'));
            transientMap.set('productName', Buffer.from('Actions'));
            transientMap.set('vulnerabilityType', Buffer.from('Injection Attack'));
            transientMap.set('vulnerabilitySeverity', Buffer.from('Medium'));
            transientMap.set('vulnerabilityPath', Buffer.from('Project Zero'));
            transientMap.set('vulnerabilityDesc', Buffer.from('Design flaw gives hackers write access to repositories and reveal secrets'));
            transientMap.set('gracePeriod', Buffer.from('60 days'));
            transientMap.set('approvedOn', Buffer.from('09-07-2020'));
            ctx.stub.getTransient.returns(transientMap);
            await contract.createVulnerabilityRecords(ctx,'2').should.be.rejectedWith(`The vendorID key was not specified in transient data. Please try again.`);
        });

        it('should throw an error if productName key is not in transient map', async () => {
            const transientMap: Map<string, Buffer> = new Map<string, Buffer>();
            transientMap.set('vulnerabilityID', Buffer.from('2'));
            transientMap.set('vendorID', Buffer.from('125'));
            transientMap.set('vendorName', Buffer.from('GitHub'));
            transientMap.set('pName', Buffer.from('Actions'));
            transientMap.set('vulnerabilityType', Buffer.from('Injection Attack'));
            transientMap.set('vulnerabilitySeverity', Buffer.from('Medium'));
            transientMap.set('vulnerabilityPath', Buffer.from('Project Zero'));
            transientMap.set('vulnerabilityDesc', Buffer.from('Design flaw gives hackers write access to repositories and reveal secrets'));
            transientMap.set('gracePeriod', Buffer.from('60 days'));
            transientMap.set('approvedOn', Buffer.from('09-07-2020'));
            ctx.stub.getTransient.returns(transientMap);
            await contract.createVulnerabilityRecords(ctx,'2').should.be.rejectedWith(`The productName key was not specified in transient data. Please try again.`);
        });

        it('should throw an error if vulnerabilityType key is not in transient map', async () => {
            const transientMap: Map<string, Buffer> = new Map<string, Buffer>();
            transientMap.set('vulnerabilityID', Buffer.from('2'));
            transientMap.set('vendorID', Buffer.from('125'));
            transientMap.set('vendorName', Buffer.from('GitHub'));
            transientMap.set('productName', Buffer.from('Actions'));
            transientMap.set('vType', Buffer.from('Injection Attack'));
            transientMap.set('vulnerabilitySeverity', Buffer.from('Medium'));
            transientMap.set('vulnerabilityPath', Buffer.from('Project Zero'));
            transientMap.set('vulnerabilityDesc', Buffer.from('Design flaw gives hackers write access to repositories and reveal secrets'));
            transientMap.set('gracePeriod', Buffer.from('60 days'));
            transientMap.set('approvedOn', Buffer.from('09-07-2020'));
            ctx.stub.getTransient.returns(transientMap);
            await contract.createVulnerabilityRecords(ctx,'2').should.be.rejectedWith(`The vulnerabilityType key was not specified in transient data. Please try again.`);
        });

        it('should throw an error if vulnerabilitySeverity key is not in transient map', async () => {
            const transientMap: Map<string, Buffer> = new Map<string, Buffer>();
            transientMap.set('vulnerabilityID', Buffer.from('2'));
            transientMap.set('vendorID', Buffer.from('125'));
            transientMap.set('vendorName', Buffer.from('GitHub'));
            transientMap.set('productName', Buffer.from('Actions'));
            transientMap.set('vulnerabilityType', Buffer.from('Injection Attack'));
            transientMap.set('vSeverity', Buffer.from('Medium'));
            transientMap.set('vulnerabilityPath', Buffer.from('Project Zero'));
            transientMap.set('vulnerabilityDesc', Buffer.from('Design flaw gives hackers write access to repositories and reveal secrets'));
            transientMap.set('gracePeriod', Buffer.from('60 days'));
            transientMap.set('approvedOn', Buffer.from('09-07-2020'));
            ctx.stub.getTransient.returns(transientMap);
            await contract.createVulnerabilityRecords(ctx,'2').should.be.rejectedWith(`The vulnerabilitySeverity key was not specified in transient data. Please try again.`);
        });

        it('should throw an error if vulnerabilityPath key is not in transient map', async () => {
            const transientMap: Map<string, Buffer> = new Map<string, Buffer>();
            transientMap.set('vulnerabilityID', Buffer.from('2'));
            transientMap.set('vendorID', Buffer.from('125'));
            transientMap.set('vendorName', Buffer.from('GitHub'));
            transientMap.set('productName', Buffer.from('Actions'));
            transientMap.set('vulnerabilityType', Buffer.from('Injection Attack'));
            transientMap.set('vulnerabilitySeverity', Buffer.from('Medium'));
            transientMap.set('vPath', Buffer.from('Project Zero'));
            transientMap.set('vulnerabilityDesc', Buffer.from('Design flaw gives hackers write access to repositories and reveal secrets'));
            transientMap.set('gracePeriod', Buffer.from('60 days'));
            transientMap.set('approvedOn', Buffer.from('09-07-2020'));
            ctx.stub.getTransient.returns(transientMap);
            await contract.createVulnerabilityRecords(ctx,'2').should.be.rejectedWith(`The vulnerabilityPath key was not specified in transient data. Please try again.`);
        });

        it('should throw an error if vulnerabilityDesc key is not in transient map', async () => {
            const transientMap: Map<string, Buffer> = new Map<string, Buffer>();
            transientMap.set('vulnerabilityID', Buffer.from('2'));
            transientMap.set('vendorID', Buffer.from('125'));
            transientMap.set('vendorName', Buffer.from('GitHub'));
            transientMap.set('productName', Buffer.from('Actions'));
            transientMap.set('vulnerabilityType', Buffer.from('Injection Attack'));
            transientMap.set('vulnerabilitySeverity', Buffer.from('Medium'));
            transientMap.set('vulnerabilityPath', Buffer.from('Project Zero'));
            transientMap.set('vDesc', Buffer.from('Design flaw gives hackers write access to repositories and reveal secrets'));
            transientMap.set('gracePeriod', Buffer.from('60 days'));
            transientMap.set('approvedOn', Buffer.from('09-07-2020'));
            ctx.stub.getTransient.returns(transientMap);
            await contract.createVulnerabilityRecords(ctx,'2').should.be.rejectedWith(`The vulnerabilityDesc key was not specified in transient data. Please try again.`);
        });

        it('should throw an error if gracePeriod key is not in transient map', async () => {
            const transientMap: Map<string, Buffer> = new Map<string, Buffer>();
            transientMap.set('vulnerabilityID', Buffer.from('2'));
            transientMap.set('vendorID', Buffer.from('125'));
            transientMap.set('vendorName', Buffer.from('GitHub'));
            transientMap.set('productName', Buffer.from('Actions'));
            transientMap.set('vulnerabilityType', Buffer.from('Injection Attack'));
            transientMap.set('vulnerabilitySeverity', Buffer.from('Medium'));
            transientMap.set('vulnerabilityPath', Buffer.from('Project Zero'));
            transientMap.set('vulnerabilityDesc', Buffer.from('Design flaw gives hackers write access to repositories and reveal secrets'));
            transientMap.set('graceP', Buffer.from('60 days'));
            transientMap.set('approvedOn', Buffer.from('09-07-2020'));
            ctx.stub.getTransient.returns(transientMap);
            await contract.createVulnerabilityRecords(ctx,'2').should.be.rejectedWith(`The gracePeriod key was not specified in transient data. Please try again.`);
        });

        it('should throw an error if approvedOn key is not in transient map', async () => {
            const transientMap: Map<string, Buffer> = new Map<string, Buffer>();
            transientMap.set('vulnerabilityID', Buffer.from('2'));
            transientMap.set('vendorID', Buffer.from('125'));
            transientMap.set('vendorName', Buffer.from('GitHub'));
            transientMap.set('productName', Buffer.from('Actions'));
            transientMap.set('vulnerabilityType', Buffer.from('Injection Attack'));
            transientMap.set('vulnerabilitySeverity', Buffer.from('Medium'));
            transientMap.set('vulnerabilityPath', Buffer.from('Project Zero'));
            transientMap.set('vulnerabilityDesc', Buffer.from('Design flaw gives hackers write access to repositories and reveal secrets'));
            transientMap.set('gracePeriod', Buffer.from('60 days'));
            transientMap.set('apOn', Buffer.from('09-07-2020'));
            ctx.stub.getTransient.returns(transientMap);
            await contract.createVulnerabilityRecords(ctx,'2').should.be.rejectedWith(`The approvedOn key was not specified in transient data. Please try again.`);
        });

        it('should create a vulnerability details if transient data keys are provided', async () => {
            const transientMap: Map<string, Buffer> = new Map<string, Buffer>();
            transientMap.set('vulnerabilityID', Buffer.from('2'));
            transientMap.set('vendorID', Buffer.from('125'));
            transientMap.set('vendorName', Buffer.from('GitHub'));
            transientMap.set('productName', Buffer.from('Actions'));
            transientMap.set('vulnerabilityType', Buffer.from('Injection Attack'));
            transientMap.set('vulnerabilitySeverity', Buffer.from('Medium'));
            transientMap.set('vulnerabilityPath', Buffer.from('Project Zero'));
            transientMap.set('vulnerabilityDesc', Buffer.from('Design flaw gives hackers write access to repositories and reveal secrets'));
            transientMap.set('gracePeriod', Buffer.from('60 days'));
            transientMap.set('approvedOn', Buffer.from('09-07-2020'));
            ctx.stub.getTransient.returns(transientMap);
            await contract.createVulnerabilityRecords(ctx, '2');
            // const newLocal = '{"vendorID":"1500", "vendorName":"Sony", "productName":"LoU2", "vulnerabilityType":"Weak Story", "vulnerabilitySeverity":"Meh", "vulnerabilityPath":"0 days", "vulnerabilityDesc":"$0"}';
            // ctx.stub.putPrivateData.should.have.been.calledOnceWithExactly(myCollectionName, '002', Buffer.from('{"privateValue":"1500"}'));
            console.log('*** Created Vulnerability Records with Secret - 2 ***');
            ctx.stub.putPrivateData.should.have.been.calledOnceWithExactly(myCollectionName, '2', Buffer.from('{"vulnerabilityID":"2","vendorID":"125","vendorName":"GitHub","productName":"Actions","vulnerabilityType":"Injection Attack","vulnerabilitySeverity":"Medium","vulnerabilityPath":"Project Zero","vulnerabilityDesc":"Design flaw gives hackers write access to repositories and reveal secrets","gracePeriod":"60 days","approvedOn":"09-07-2020"}'));
        });
    });

    describe('#readPrivateVulnerabilityRecords', () => {
        it('should throw an error for a vulnerability that does not exist', async () => {
            console.log('*** Trying to read Vulnerability Records that do not exist ***');
            await contract.readVulnerabilityRecords(ctx, '3').should.be.rejectedWith(/The asset vulnerability 3 does not exist/);
        });

        it('should return a vulnerability', async () => {
            console.log('*** Reading Vulnerability Records for Secret - 1 ***');
            await contract.readVulnerabilityRecords(ctx, '1').should.eventually.deep.equal({vulnerabilityID:'1',vendorID:'1247',vendorName:'Mozilla',productName:'Firefox for Android',vulnerabilityType:'Security Bug',vulnerabilitySeverity:'High',vulnerabilityPath:'content:// URI',vulnerabilityDesc:'Local files exposed to attackers',gracePeriod:'120 days',approvedOn:'08-01-2020'});
            // await contract.readVulnerabilityRecords(ctx,'2').should.eventually.deep.equal({vulnerabilityID:'2',vendorID:'125',vendorName:'GitHub',productName:'Actions',vulnerabilityType:'Injection Attack',vulnerabilitySeverity:'Medium',vulnerabilityPath:'Project Zero',vulnerabilityDesc:'Design flaw gives hackers write access to repositories and reveal secrets'});
        });
    });

    describe('#updateVulnerabilityRecords', () => {
        it('should throw an error for a vulnerability that does not exist', async () => {
            console.log('*** Trying to update Vulnerability Records that do not exist ***');
            await contract.updateVulnerabilityRecords(ctx, '3').should.be.rejectedWith(/The asset vulnerability 3 does not exist/);
        });

        it('should throw an error if transient data is not provided when updating a vulnerability', async () => {
            console.log('*** Trying to update Vulnerability Records with missing fields ***');
            const transientMap: Map<string, Buffer> = new Map<string, Buffer>();
            ctx.stub.getTransient.returns(transientMap);
            await contract.updateVulnerabilityRecords(ctx, '1').should.be.rejectedWith(`The keys were not specified in transient data. Please try again.`);
        });
        it('should update my private asset if vulnerability exists', async () => {
            console.log('*** Updating Vulnerability Records for Secret - 1 ***');
            const transientMap: Map<string, Buffer> = new Map<string, Buffer>();
            transientMap.set('vulnerabilityID', Buffer.from('1'));
            transientMap.set('vendorID', Buffer.from('1247'));
            transientMap.set('vendorName', Buffer.from('Intel'));
            transientMap.set('productName', Buffer.from('Aeon UP Gateway'));
            transientMap.set('vulnerabilityType', Buffer.from('Device Crash'));
            transientMap.set('vulnerabilitySeverity', Buffer.from('Medium'));
            transientMap.set('vulnerabilityPath', Buffer.from('https://some-path.com'));
            transientMap.set('vulnerabilityDesc', Buffer.from('Blank Screen'));
            transientMap.set('gracePeriod', Buffer.from('120 days'));
            transientMap.set('approvedOn', Buffer.from('08-01-2020'));
            ctx.stub.getTransient.returns(transientMap);
            await contract.updateVulnerabilityRecords(ctx, '1');
            ctx.stub.putPrivateData.should.have.been.calledOnceWithExactly(myCollectionName, '1', Buffer.from('{"vulnerabilityID":"1","vendorID":"1247","vendorName":"Intel","productName":"Aeon UP Gateway","vulnerabilityType":"Device Crash","vulnerabilitySeverity":"Medium","vulnerabilityPath":"https://some-path.com","vulnerabilityDesc":"Blank Screen","gracePeriod":"120 days","approvedOn":"08-01-2020"}'));
        });


        /* it('should throw an error if transient data key is not privateValue', async () => {
            const transientMap: Map<string, Buffer> = new Map<string, Buffer>();
            transientMap.set('prVal', Buffer.from('125'));
            ctx.stub.getTransient.returns(transientMap);
            await contract.updateVulnerability(ctx, '1').should.be.rejectedWith(`The privateValue key was not specified in transient data. Please try again.`);
        });*/
    });

    describe('#verifyVulnerabilityRecords', () => {

        it('should return false if hash calculated from object provided does not match the hash of the private data', async () => {
            ctx.stub.getPrivateDataHash.withArgs(myCollectionName, '1').resolves(Buffer.from('someHash'));
            const result: boolean = await contract.verifyVulnerabilityRecords(ctx, '1', {vulnerabilityID:'1', vendorID:'someValue',vendorName:'someValue',productName:'someValue',vulnerabilityType:'someValue',vulnerabilitySeverity:'someValue',vulnerabilityPath:'someValue',vulnerabilityDesc:'someValue',gracePeriod:'someValue',approvedOn:'someValue'});
            result.should.equal(false);
        });
        it('should throw an error when user tries to verify an asset that doesnt exist', async () => {
            console.log('*** Verifying if public hash matches private data hash for Vulnerability Records that do not exist ***');
            ctx.stub.getPrivateDataHash.withArgs(myCollectionName, '5').resolves(Buffer.from(''));
            await contract.verifyVulnerabilityRecords(ctx, '5', {vulnerabilityID:'5',vendorID:'someValue',vendorName:'someValue',productName:'someValue',vulnerabilityType:'someValue',vulnerabilitySeverity:'someValue',vulnerabilityPath:'someValue',vulnerabilityDesc:'someValue',gracePeriod:'someValue',approvedOn:'someValue'}).should.be.rejectedWith('No private data hash with the Key: 5');
        });
        it('should return true if hash calculated from object provided matches the hash of the private data', async () => {
            console.log('*** Verifying if public hash matches private data hash for Secret - 1 ***');
            const privateObj: string = '{"vulnerabilityID":"1","vendorID":"1247","vendorName":"Mozilla","productName":"Firefox for Android","vulnerabilityType":"Security Bug","vulnerabilitySeverity":"High","vulnerabilityPath":"content:// URI","vulnerabilityDesc":"Local files exposed to attackers","gracePeriod":"120 days","approvedOn":"08-01-2020"}';
            const hashToVerify: string = crypto.createHash('sha256').update(privateObj).digest('hex');
            ctx.stub.getPrivateDataHash.withArgs(myCollectionName, '1').resolves(Buffer.from(hashToVerify, 'hex'));
            const result: boolean = await contract.verifyVulnerabilityRecords(ctx, '1', {vulnerabilityID:'1',vendorID:'1247',vendorName:'Mozilla',productName:'Firefox for Android',vulnerabilityType:'Security Bug',vulnerabilitySeverity:'High',vulnerabilityPath:'content:// URI',vulnerabilityDesc:'Local files exposed to attackers',gracePeriod:'120 days',approvedOn:'08-01-2020'});
            result.should.equal(true);
        });
    });

    describe('#interledgerCommit', () => {
        it('should return null', async () => {
            contract.interledgerCommit(ctx);
        });
    });

    describe('#interledgerAbort', () => {
        it('should return null', async () => {
            contract.interledgerAbort(ctx);
        });
    });

    describe('#interledgerReceive', () => {

        it('should throw an error if secret is incorrect', async () => {
            console.log('*** Trying to obtain Vulnerability Records with incorrect Secret ***');
            await contract.interledgerReceive(ctx, 'nonce', '0x00000000000000000000000000000000000000000000000000000000000003a7000000000000000000000000000000000000000000000000000000000012d6e8').should.be.rejectedWith(/The asset vulnerability 935 does not exist/);
        });

        it('should return vulnerability details if secrets match', async () => {
            console.log('*** Transferring Vulnerability Records to Public Ledger via Interledger for Secret - 1 ***');
            await contract.interledgerReceive(ctx, 'nonce', '0x00000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001');
            ctx.stub.getPrivateData.should.have.been.calledWithExactly(myCollectionName, '1');
        });
    });

    describe('#deleteVulnerabilityRecords', () => {

        it('should throw an error for a vulnerability that does not exist', async () => {
            console.log('*** Trying to delete Vulnerability Records that do not exist ***');
            await contract.deleteVulnerabilityRecords(ctx, '444').should.be.rejectedWith(/The asset vulnerability 444 does not exist/);
        });

        it('should delete a vulnerability', async () => {
            console.log('*** Deleting Vulnerability Records with Secret - 1 ***');
            await contract.deleteVulnerabilityRecords(ctx, '1');
            ctx.stub.deletePrivateData.should.have.been.calledOnceWithExactly(myCollectionName, '1');
        });
    });
});
