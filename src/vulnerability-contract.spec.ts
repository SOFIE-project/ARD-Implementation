/*
 * SPDX-License-Identifier: Apache-2.0
 */

//  tslint:disable: no-unused-expression
import { Context } from 'fabric-contract-api';
import { ChaincodeStub, ClientIdentity } from 'fabric-shim';
import { VulnerabilityContract } from '.';

import * as chai from 'chai';
import * as chaiAsPromised from 'chai-as-promised';
import crypto = require('crypto');
import * as sinon from 'sinon';
import * as sinonChai from 'sinon-chai';
import winston = require('winston');
// var EventEmitter = require('events').EventEmitter;


chai.should();
chai.use(chaiAsPromised);
chai.use(sinonChai);

class TestContext implements Context {
    public stub: sinon.SinonStubbedInstance<ChaincodeStub> = sinon.createStubInstance(ChaincodeStub);
    public clientIdentity: sinon.SinonStubbedInstance<ClientIdentity> = sinon.createStubInstance(ClientIdentity);
    public logging = {
        getLogger: sinon.stub().returns(sinon.createStubInstance(winston.createLogger().constructor)),
        setLevel: sinon.stub(),
    };
}

describe('VulnerabilityContract', () => {

    let contract: VulnerabilityContract;
    let ctx: TestContext;
    const myCollectionName: string = 'CollectionOne';

    beforeEach(() => {
        contract = new VulnerabilityContract();
        ctx = new TestContext();
        ctx.stub.getPrivateData.withArgs(myCollectionName, '001').resolves(Buffer.from('{"vendorID":"1247","vendorName":"Intel","productName":"Aeon UP Gateway","vulnerabilityType":"Device Crash","vulnerabilitySeverity":"Low","gracePeriod":"90 days","bountyAmount":"$1500"}'));
        const hashToVerify = crypto.createHash('sha256').update('{"vendorID":"1247","vendorName":"Intel","productName":"Aeon UP Gateway","vulnerabilityType":"Device Crash","vulnerabilitySeverity":"Low","gracePeriod":"90 days","bountyAmount":"$1500"}').digest('hex');
        ctx.stub.getPrivateDataHash.withArgs(myCollectionName, '001').resolves(Buffer.from(hashToVerify, 'hex'));
    });

    describe('#vulnerabilityExists', () => {

        it('should return true for a vulnerability', async () => {
            await contract.vulnerabilityExists(ctx, '001').should.eventually.be.true;
        });

        it('should return false for a vulnerability that does not exist', async () => {
            await contract.vulnerabilityExists(ctx, '003').should.eventually.be.false;
        });
    });

    describe('#createVulnerability', () => {

        it('should throw an error for a vulnerability details that already exists', async () => {
            await contract.createVulnerability(ctx, '001').should.be.rejectedWith(/The asset vulnerability details 001 already exists/);
        });

        it('should throw an error if transient data is not provided when creating a vulnerability details', async () => {
            const transientMap: Map<string, Buffer> = new Map<string, Buffer>();
            ctx.stub.getTransient.returns(transientMap);
            await contract.createVulnerability(ctx, '002').should.be.rejectedWith('The keys were not specified in transient data. Please try again.');
        });

        it('should throw an error if transient data key is not vulnerability details', async () => {
            const transientMap: Map<string, Buffer> = new Map<string, Buffer>();
            transientMap.set('vendID', Buffer.from('125'));// add all the vul details
            ctx.stub.getTransient.returns(transientMap);
            await contract.createVulnerability(ctx,'002').should.be.rejectedWith(`The vendorID key was not specified in transient data. Please try again.`);
        });

        it('should create a vulnerability details if transient data keys are provided', async () => {
            const transientMap: Map<string, Buffer> = new Map<string, Buffer>();
            transientMap.set('vendorID', Buffer.from('1500'));
            transientMap.set('vendorName', Buffer.from('Sony'));
            transientMap.set('productName', Buffer.from('LoU2'));
            transientMap.set('vulnerabilityType', Buffer.from('Weak Story'));
            transientMap.set('vulnerabilitySeverity', Buffer.from('Meh'));
            transientMap.set('gracePeriod', Buffer.from('0 days'));
            transientMap.set('bountyAmount', Buffer.from('$0'));
            ctx.stub.getTransient.returns(transientMap);
            await contract.createVulnerability(ctx, '002');
            // const newLocal = '{"vendorID":"1500", "vendorName":"Sony", "productName":"LoU2", "vulnerabilityType":"Weak Story", "vulnerabilitySeverity":"Meh", "gracePeriod":"0 days", "bountyAmount":"$0"}';
            // ctx.stub.putPrivateData.should.have.been.calledOnceWithExactly(myCollectionName, '002', Buffer.from('{"privateValue":"1500"}'));
            ctx.stub.putPrivateData.should.have.been.calledOnceWithExactly(myCollectionName, '002', Buffer.from('{"vendorID":"1500","vendorName":"Sony","productName":"LoU2","vulnerabilityType":"Weak Story","vulnerabilitySeverity":"Meh","gracePeriod":"0 days","bountyAmount":"$0"}'));
        });
    });

    describe('#readPrivateVulnerability', () => {

        it('should throw an error for a vulnerability that does not exist', async () => {
            await contract.readVulnerability(ctx, '003').should.be.rejectedWith(/The asset vulnerability 003 does not exist/);
        });

        it('should return a vulnerability', async () => {
            await contract.readVulnerability(ctx, '001').should.eventually.deep.equal({vendorID:'1247',vendorName:'Intel',productName:'Aeon UP Gateway',vulnerabilityType:'Device Crash',vulnerabilitySeverity:'Low',gracePeriod:'90 days',bountyAmount:'$1500'});
            ctx.stub.getPrivateData.should.have.been.calledWithExactly(myCollectionName, '001');
        });
    });

    describe('#updateVulnerability', () => {

        it('should throw an error for a vulnerability that does not exist', async () => {
            await contract.updateVulnerability(ctx, '003').should.be.rejectedWith(/The asset vulnerability 003 does not exist/);
        });
        it('should update my private asset if vulnerability exists', async () => {
            const transientMap: Map<string, Buffer> = new Map<string, Buffer>();
            transientMap.set('vendorID', Buffer.from('1247'));
            transientMap.set('vendorName', Buffer.from('Intel'));
            transientMap.set('productName', Buffer.from('Aeon UP Gateway'));
            transientMap.set('vulnerabilityType', Buffer.from('Device Crash'));
            transientMap.set('vulnerabilitySeverity', Buffer.from('Medium'));
            transientMap.set('gracePeriod', Buffer.from('90 days'));
            transientMap.set('bountyAmount', Buffer.from('$1800'));
            ctx.stub.getTransient.returns(transientMap);
            await contract.updateVulnerability(ctx, '001');
            ctx.stub.putPrivateData.should.have.been.calledOnceWithExactly(myCollectionName, '001', Buffer.from('{"vendorID":"1247","vendorName":"Intel","productName":"Aeon UP Gateway","vulnerabilityType":"Device Crash","vulnerabilitySeverity":"Medium","gracePeriod":"90 days","bountyAmount":"$1800"}'));
        });

        /* it('should throw an error if transient data is not provided when updating a vulnerability', async () => {
            const transientMap: Map<string, Buffer> = new Map<string, Buffer>();
            ctx.stub.getTransient.returns(transientMap);
            await contract.updateVulnerability(ctx, '001', "Not Patched").should.be.rejectedWith(`The privateValue key was not specified in transient data. Please try again.`);
        });*/

        /* it('should throw an error if transient data key is not privateValue', async () => {
            const transientMap: Map<string, Buffer> = new Map<string, Buffer>();
            transientMap.set('prVal', Buffer.from('125'));
            ctx.stub.getTransient.returns(transientMap);
            await contract.updateVulnerability(ctx, '001').should.be.rejectedWith(`The privateValue key was not specified in transient data. Please try again.`);
        });*/
    });

    describe('#deleteVulnerability', () => {

        it('should throw an error for a vulnerability that does not exist', async () => {
            await contract.deleteVulnerability(ctx, '003').should.be.rejectedWith(/The asset vulnerability 003 does not exist/);
        });

        it('should delete a vulnerability', async () => {
            await contract.deleteVulnerability(ctx, '001');
            ctx.stub.deletePrivateData.should.have.been.calledOnceWithExactly(myCollectionName, '001');
        });
    });

    describe('#verifyVulnerability', () => {

        it('should return true if hash calculated from object provided matches the hash of the private data', async () => {
            const privateObj: string = '{"vendorID":"1247","vendorName":"Intel","productName":"Aeon UP Gateway","vulnerabilityType":"Device Crash","vulnerabilitySeverity":"Medium","gracePeriod":"90 days","bountyAmount":"$1800"}';
            const hashToVerify: string = crypto.createHash('sha256').update(privateObj).digest('hex');
            ctx.stub.getPrivateDataHash.withArgs(myCollectionName, '001').resolves(Buffer.from(hashToVerify, 'hex'));
            const result: boolean = await contract.verifyVulnerability(ctx, '001', {vendorID:'1247',vendorName:'Intel',productName:'Aeon UP Gateway',vulnerabilityType:'Device Crash',vulnerabilitySeverity:'Medium',gracePeriod:'90 days',bountyAmount:'$1800'});
            result.should.equal(true);
        });

        it('should return false if hash calculated from object provided does not match the hash of the private data', async () => {
            ctx.stub.getPrivateDataHash.withArgs(myCollectionName, '001').resolves(Buffer.from('someHash'));
            const result: boolean = await contract.verifyVulnerability(ctx, '001', {vendorID:'someValue',vendorName:'Sony',productName:'LoU2',vulnerabilityType:'Weak Story',vulnerabilitySeverity:'Meh',gracePeriod:'0 days',bountyAmount:'$0'});
            result.should.equal(false);
        });
        it('should throw an error when user tries to verify an asset that doesnt exist', async () => {
            ctx.stub.getPrivateDataHash.withArgs(myCollectionName, '005').resolves(Buffer.from(''));
            await contract.verifyVulnerability(ctx, '005', {vendorID:'someValue',vendorName:'Sony',productName:'LoU2',vulnerabilityType:'Weak Story',vulnerabilitySeverity:'Meh',gracePeriod:'0 days',bountyAmount:'$0'}).should.be.rejectedWith('No private data hash with the Key: 005');
        });
    });

    describe('#interledgerCommit', () => {
        it('should return null', async () => {
            contract.interledgerCommit(ctx);
        });
    });

    describe('#interledgerAbort', () => {
        it('should return null', async () => {
            contract.interledgerAbort(ctx);
        });
    });

    describe('#interledgerReceive', () => {

        it('should throw an error if secret is incorrect', async () => {
            await contract.interledgerReceive(ctx, 'nonce', '007').should.be.rejectedWith(/The asset vulnerability 007 does not exist/);
        });

        it('should return vulnerability details if secret matches vulnerability ID', async () => {
            await contract.interledgerReceive(ctx, 'nonce', '001');
            ctx.stub.getPrivateData.should.have.been.calledWithExactly(myCollectionName, '001');
        });
    });
});
