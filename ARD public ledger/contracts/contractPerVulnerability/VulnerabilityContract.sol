pragma solidity ^0.6.0;

// import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract VulnerabilityContract is Ownable {


     // States

    enum Status {Pending, Invalid, Valid, Acknowledged, Patched, Disclosed}
    enum RewardStatus {NULL, SET, TOCLAIM, TOREFUND, SENT} // TODO evaluate if we need TOREFUND


    // Reward
    RewardStatus public  rewStatus;

    // Metadata
    address public vendor;             // The address of the vendor
    bytes32 public vendorName;         // The name of the vendor
    bytes32 public productName;        // The name of the product
    bytes32 public productVersion;     // The version of the product
    bytes32 public vulnerabilityHash;  // The hash of the vulnerability information

    // Contract info
    uint public timestamp;                 // The timestamp of the creation of the vulnerability
    address payable public researcher;     // Researcher address
    Status public status;                  // The status of the vulnerability
    bytes32 public hashlock;               // Sha-2 sha256 the secret used as hashlock
    uint public timelock;                  // UNIX timestamp seconds - locked UNTIL this time //deadline
    uint public secret;                    // The secret
    string public vulnerabilityLocation;   // A pointer to a location with the vulnerability information

    constructor (
        address payable _researcher,
        bytes32 _vendorName,
        bytes32 _productName,
        bytes32 _productVersion,
        bytes32 _vulnerabilityHash,
        bytes32 _hashlock) public {

        // Store the new vulnerability entry

        //Set Reward
        rewStatus=RewardStatus.NULL;

        // Set Metadata
        vendorName=_vendorName;
        productName=_productName;
        productVersion=_productVersion;
        vulnerabilityHash=_vulnerabilityHash;

        // Set info
        timestamp=block.timestamp;
        researcher= _researcher;
        hashlock=_hashlock;
        timelock=0;
        vulnerabilityLocation= "";
        status=Status.Pending;
        secret= 0;
        }


    function setVendor(address _vendor) external onlyOwner{
        require(vendor==address(0), "Vendor  has been set already");
        vendor=_vendor;
    }


    function setStatus(Status _status) external onlyOwner{
        status=_status;
    }

     function setRewardStatus(RewardStatus _rewStatus) external onlyOwner{
        rewStatus=_rewStatus;
    }

    function setTimelock(uint _timelock) external onlyOwner{
        require(timelock==0, "Timelock has been set already");
        timelock=_timelock;
    }

    function setSecret(uint _secret) external onlyOwner{
        require(secret==0, "Secret has been set already");
        secret=_secret;
    }

    function setLocation(string calldata _location) external onlyOwner{
        vulnerabilityLocation=_location;
    }


}
