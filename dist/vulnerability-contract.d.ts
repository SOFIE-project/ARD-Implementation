import { Context, Contract } from 'fabric-contract-api';
import { Vulnerability } from './vulnerability';
interface InterledgerReceiver {
    interledgerReceive(ctx: Context, nonce: string, secretData: string): Promise<string>;
}
interface InterledgerSender {
    interledgerCommit(ctx: Context): Error;
    interledgerAbort(ctx: Context): Error;
}
export declare class VulnerabilityContract extends Contract implements InterledgerReceiver, InterledgerSender {
    vulnerabilityExists(ctx: Context, vulnerabilityId: string): Promise<boolean>;
    createVulnerability(ctx: Context, vulnerabilityId: string): Promise<void>;
    readVulnerability(ctx: Context, vulnerabilityId: string): Promise<string>;
    updateVulnerability(ctx: Context, vulnerabilityId: string): Promise<void>;
    deleteVulnerability(ctx: Context, vulnerabilityId: string): Promise<void>;
    verifyVulnerability(ctx: Context, vulnerabilityId: string, objectToVerify: Vulnerability): Promise<boolean>;
    interledgerAbort(ctx: Context): Error;
    interledgerCommit(ctx: Context): Error;
    emitData(ctx: Context, data: Promise<string>): Promise<Error>;
    interledgerReceive(ctx: Context, nonceString: string, secretData: string): Promise<string>;
}
export {};
