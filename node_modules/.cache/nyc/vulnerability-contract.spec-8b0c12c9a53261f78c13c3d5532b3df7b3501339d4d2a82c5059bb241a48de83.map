{"version":3,"file":"/home/prateeti/SOFIE-private-ledger/vulnerability-private-data-collections/src/vulnerability-contract.spec.ts","sources":["/home/prateeti/SOFIE-private-ledger/vulnerability-private-data-collections/src/vulnerability-contract.spec.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * SPDX-License-Identifier: Apache-2.0\n */\n\n//  tslint:disable: no-unused-expression\nimport { Context } from 'fabric-contract-api';\nimport { ChaincodeStub, ClientIdentity } from 'fabric-shim';\nimport { VulnerabilityContract } from '.';\n\nimport * as chai from 'chai';\nimport * as chaiAsPromised from 'chai-as-promised';\nimport crypto = require('crypto');\nimport * as sinon from 'sinon';\nimport * as sinonChai from 'sinon-chai';\nimport winston = require('winston');\n\nchai.should();\nchai.use(chaiAsPromised);\nchai.use(sinonChai);\n\nclass TestContext implements Context {\n    public stub: sinon.SinonStubbedInstance<ChaincodeStub> = sinon.createStubInstance(ChaincodeStub);\n    public clientIdentity: sinon.SinonStubbedInstance<ClientIdentity> = sinon.createStubInstance(ClientIdentity);\n    public logging = {\n        getLogger: sinon.stub().returns(sinon.createStubInstance(winston.createLogger().constructor)),\n        setLevel: sinon.stub(),\n    };\n}\n\ndescribe('VulnerabilityContract', () => {\n\n    let contract: VulnerabilityContract;\n    let ctx: TestContext;\n    const myCollectionName: string = 'CollectionOne';\n\n    beforeEach(() => {\n        contract = new VulnerabilityContract();\n        ctx = new TestContext();\n        ctx.stub.getPrivateData.withArgs(myCollectionName, '001').resolves(Buffer.from('{\"vendorID\":\"1247\",\"vendorName\":\"Intel\",\"productName\":\"Aeon UP Gateway\",\"vulnerabilityType\":\"Device Crash\",\"vulnerabilitySeverity\":\"Low\",\"gracePeriod\":\"90 days\",\"bountyAmount\":\"$1500\"}'));\n        const hashToVerify = crypto.createHash('sha256').update('{\"vendorID\":\"1247\",\"vendorName\":\"Intel\",\"productName\":\"Aeon UP Gateway\",\"vulnerabilityType\":\"Device Crash\",\"vulnerabilitySeverity\":\"Low\",\"gracePeriod\":\"90 days\",\"bountyAmount\":\"$1500\"}').digest('hex');\n        ctx.stub.getPrivateDataHash.withArgs(myCollectionName, '001').resolves(Buffer.from(hashToVerify, 'hex'));\n    });\n\n    describe('#vulnerabilityExists', () => {\n\n        it('should return true for a vulnerability', async () => {\n            await contract.vulnerabilityExists(ctx, '001').should.eventually.be.true;\n        });\n\n        it('should return false for a vulnerability that does not exist', async () => {\n            await contract.vulnerabilityExists(ctx, '003').should.eventually.be.false;\n        });\n    });\n\n    describe('#createVulnerability', () => {\n\n        it('should throw an error for a vulnerability details that already exists', async () => {\n            await contract.createVulnerability(ctx, '001').should.be.rejectedWith(/The asset vulnerability details 001 already exists/);\n        });\n\n        it('should throw an error if transient data is not provided when creating a vulnerability details', async () => {\n            const transientMap: Map<string, Buffer> = new Map<string, Buffer>();\n            ctx.stub.getTransient.returns(transientMap);\n            await contract.createVulnerability(ctx, '002').should.be.rejectedWith('The keys were not specified in transient data. Please try again.');\n        });\n\n        it('should throw an error if transient data key is not vulnerability details', async () => {\n            const transientMap: Map<string, Buffer> = new Map<string, Buffer>();\n            transientMap.set('vendID', Buffer.from('125'));// add all the vul details\n            ctx.stub.getTransient.returns(transientMap);\n            await contract.createVulnerability(ctx,'002').should.be.rejectedWith(`The vendorID key was not specified in transient data. Please try again.`);\n        });\n\n        it('should create a vulnerability details if transient data keys are provided', async () => {\n            const transientMap: Map<string, Buffer> = new Map<string, Buffer>();\n            transientMap.set('vendorID', Buffer.from('1500'));\n            transientMap.set('vendorName', Buffer.from('Sony'));\n            transientMap.set('productName', Buffer.from('LoU2'));\n            transientMap.set('vulnerabilityType', Buffer.from('Weak Story'));\n            transientMap.set('vulnerabilitySeverity', Buffer.from('Meh'));\n            transientMap.set('gracePeriod', Buffer.from('0 days'));\n            transientMap.set('bountyAmount', Buffer.from('$0'));\n            ctx.stub.getTransient.returns(transientMap);\n            await contract.createVulnerability(ctx, '002');\n            // const newLocal = '{\"vendorID\":\"1500\", \"vendorName\":\"Sony\", \"productName\":\"LoU2\", \"vulnerabilityType\":\"Weak Story\", \"vulnerabilitySeverity\":\"Meh\", \"gracePeriod\":\"0 days\", \"bountyAmount\":\"$0\"}';\n            // ctx.stub.putPrivateData.should.have.been.calledOnceWithExactly(myCollectionName, '002', Buffer.from('{\"privateValue\":\"1500\"}'));\n            ctx.stub.putPrivateData.should.have.been.calledOnceWithExactly(myCollectionName, '002', Buffer.from('{\"vendorID\":\"1500\",\"vendorName\":\"Sony\",\"productName\":\"LoU2\",\"vulnerabilityType\":\"Weak Story\",\"vulnerabilitySeverity\":\"Meh\",\"gracePeriod\":\"0 days\",\"bountyAmount\":\"$0\"}'));\n        });\n    });\n\n    describe('#readPrivateVulnerability', () => {\n\n        it('should throw an error for a vulnerability that does not exist', async () => {\n            await contract.readVulnerability(ctx, '003').should.be.rejectedWith(/The asset vulnerability 003 does not exist/);\n        });\n\n        it('should return a vulnerability', async () => {\n            await contract.readVulnerability(ctx, '001').should.eventually.deep.equal({vendorID:'1247',vendorName:'Intel',productName:'Aeon UP Gateway',vulnerabilityType:'Device Crash',vulnerabilitySeverity:'Low',gracePeriod:'90 days',bountyAmount:'$1500'});\n            ctx.stub.getPrivateData.should.have.been.calledWithExactly(myCollectionName, '001');\n        });\n    });\n\n    describe('#updateVulnerability', () => {\n\n        it('should throw an error for a vulnerability that does not exist', async () => {\n            await contract.updateVulnerability(ctx, '003').should.be.rejectedWith(/The asset vulnerability 003 does not exist/);\n        });\n        it('should update my private asset if vulnerability exists', async () => {\n            const transientMap: Map<string, Buffer> = new Map<string, Buffer>();\n            transientMap.set('vendorID', Buffer.from('1247'));\n            transientMap.set('vendorName', Buffer.from('Intel'));\n            transientMap.set('productName', Buffer.from('Aeon UP Gateway'));\n            transientMap.set('vulnerbilityType', Buffer.from('Device Crash'));\n            transientMap.set('vulnerabilitySeverity', Buffer.from('Medium'));\n            transientMap.set('gracePeriod', Buffer.from('90 days'));\n            transientMap.set('bountyAmount', Buffer.from('$1800'));\n            ctx.stub.getTransient.returns(transientMap);\n            await contract.updateVulnerability(ctx, '001');\n            ctx.stub.putPrivateData.should.have.been.calledOnceWithExactly(myCollectionName, '001', '{\"vendorID\":\"1247\",\"vendorName\":\"Intel\",\"productName\":\"Aeon UP Gateway\",\"vulnerabilityType\":\"Device Crash\",\"vulnerabilitySeverity\":\"Medium\",\"gracePeriod\":\"90 days\",\"bountyAmount\":\"$1800\"}');\n        });\n\n        /* it('should throw an error if transient data is not provided when updating a vulnerability', async () => {\n            const transientMap: Map<string, Buffer> = new Map<string, Buffer>();\n            ctx.stub.getTransient.returns(transientMap);\n            await contract.updateVulnerability(ctx, '001', \"Not Patched\").should.be.rejectedWith(`The privateValue key was not specified in transient data. Please try again.`);\n        });*/\n\n        /* it('should throw an error if transient data key is not privateValue', async () => {\n            const transientMap: Map<string, Buffer> = new Map<string, Buffer>();\n            transientMap.set('prVal', Buffer.from('125'));\n            ctx.stub.getTransient.returns(transientMap);\n            await contract.updateVulnerability(ctx, '001').should.be.rejectedWith(`The privateValue key was not specified in transient data. Please try again.`);\n        });*/\n    });\n\n    describe('#deleteVulnerability', () => {\n\n        it('should throw an error for a vulnerability that does not exist', async () => {\n            await contract.deleteVulnerability(ctx, '003').should.be.rejectedWith(/The asset vulnerability 003 does not exist/);\n        });\n\n        it('should delete a vulnerability', async () => {\n            await contract.deleteVulnerability(ctx, '001');\n            ctx.stub.deletePrivateData.should.have.been.calledOnceWithExactly(myCollectionName, '001');\n        });\n    });\n\n    describe('#verifyVulnerability', () => {\n\n        it('should return true if hash calculated from object provided matches the hash of the private data', async () => {\n            const privateObj: string = '';\n            const hashToVerify: string = crypto.createHash('sha256').update(privateObj).digest('hex');\n            ctx.stub.getPrivateDataHash.withArgs(myCollectionName, '001').resolves(Buffer.from(hashToVerify, 'hex'));\n            const result: boolean = await contract.verifyVulnerability(ctx, '001', {vendorID:'1247',vendorName:'Intel',productName:'Aeon UP Gateway',vulnerabilityType:'Device Crash',vulnerabilitySeverity:'Medium',gracePeriod:'90 days',bountyAmount:'$1800'});\n            result.should.equal(true);\n        });\n\n        it('should return false if hash calculated from object provided does not match the hash of the private data', async () => {\n            ctx.stub.getPrivateDataHash.withArgs(myCollectionName, '001').resolves(Buffer.from('someHash'));\n            const result: boolean = await contract.verifyVulnerability(ctx, '001', {vendorID:'someValue',vendorName:'Sony',productName:'LoU2',vulnerabilityType:'Weak Story',vulnerabilitySeverity:'Meh',gracePeriod:'0 days',bountyAmount:'$0'});\n            result.should.equal(false);\n        });\n        it('should throw an error when user tries to verify an asset that doesnt exist', async () => {\n            ctx.stub.getPrivateDataHash.withArgs(myCollectionName, '005').resolves(Buffer.from(''));\n            await contract.verifyVulnerability(ctx, '005', {vendorID:'someValue',vendorName:'Sony',productName:'LoU2',vulnerabilityType:'Weak Story',vulnerabilitySeverity:'Meh',gracePeriod:'0 days',bountyAmount:'$0'}).should.be.rejectedWith('No private data hash with the Key: 005');\n        });\n    });\n});\n"]}