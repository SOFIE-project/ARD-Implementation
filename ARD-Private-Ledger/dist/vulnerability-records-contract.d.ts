import { Context, Contract } from 'fabric-contract-api';
import { VulnerabilityRecords } from './vulnerability-records';
interface InterledgerReceiver {
    interledgerReceive(ctx: Context, nonce: string, secretIDData: string): Promise<string>;
}
interface InterledgerSender {
    interledgerCommit(ctx: Context): Error;
    interledgerAbort(ctx: Context): Error;
}
export declare class VulnerabilityRecordsContract extends Contract implements InterledgerReceiver, InterledgerSender {
    vulnerabilityRecordsExists(ctx: Context, vulnerabilityRecordsId: string): Promise<boolean>;
    createVulnerabilityRecords(ctx: Context, vulnerabilityRecordsId: string): Promise<void>;
    readVulnerabilityRecords(ctx: Context, vulnerabilityRecordsId: string): Promise<string>;
    updateVulnerabilityRecords(ctx: Context, vulnerabilityRecordsId: string): Promise<void>;
    deleteVulnerabilityRecords(ctx: Context, vulnerabilityRecordsId: string): Promise<void>;
    verifyVulnerabilityRecords(ctx: Context, vulnerabilityRecordsId: string, objectToVerify: VulnerabilityRecords): Promise<boolean>;
    interledgerAbort(ctx: Context): Error;
    interledgerCommit(ctx: Context): Error;
    emitData(ctx: Context, vulnerabilityID: string, data: string): Promise<Error>;
    interledgerReceive(ctx: Context, nonceString: string, secretIDDataBytes: string): Promise<string>;
}
export {};
