"use strict";/*
 * SPDX-License-Identifier: Apache-2.0
 */function cov_1lbzhnkp8f(){var path="/home/prateeti/SOFIE-private-ledger/vulnerability-private-data-collections/src/vulnerability-contract.spec.ts";var hash="b667c8a0f4b0fbf0b64c0d59538543eab0b8df8c";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/prateeti/SOFIE-private-ledger/vulnerability-private-data-collections/src/vulnerability-contract.spec.ts",statementMap:{"0":{start:{line:5,column:0},end:{line:5,column:62}},"1":{start:{line:6,column:22},end:{line:6,column:44}},"2":{start:{line:7,column:11},end:{line:7,column:23}},"3":{start:{line:8,column:13},end:{line:8,column:28}},"4":{start:{line:9,column:23},end:{line:9,column:50}},"5":{start:{line:10,column:15},end:{line:10,column:32}},"6":{start:{line:11,column:14},end:{line:11,column:30}},"7":{start:{line:12,column:18},end:{line:12,column:39}},"8":{start:{line:13,column:16},end:{line:13,column:34}},"9":{start:{line:14,column:0},end:{line:14,column:14}},"10":{start:{line:15,column:0},end:{line:15,column:25}},"11":{start:{line:16,column:0},end:{line:16,column:20}},"12":{start:{line:19,column:8},end:{line:19,column:74}},"13":{start:{line:20,column:8},end:{line:20,column:85}},"14":{start:{line:21,column:8},end:{line:24,column:10}},"15":{start:{line:27,column:0},end:{line:142,column:3}},"16":{start:{line:30,column:29},end:{line:30,column:44}},"17":{start:{line:31,column:4},end:{line:37,column:7}},"18":{start:{line:32,column:8},end:{line:32,column:50}},"19":{start:{line:33,column:8},end:{line:33,column:32}},"20":{start:{line:34,column:8},end:{line:34,column:276}},"21":{start:{line:35,column:29},end:{line:35,column:265}},"22":{start:{line:36,column:8},end:{line:36,column:113}},"23":{start:{line:38,column:4},end:{line:45,column:7}},"24":{start:{line:39,column:8},end:{line:41,column:11}},"25":{start:{line:40,column:12},end:{line:40,column:85}},"26":{start:{line:42,column:8},end:{line:44,column:11}},"27":{start:{line:43,column:12},end:{line:43,column:86}},"28":{start:{line:46,column:4},end:{line:76,column:7}},"29":{start:{line:47,column:8},end:{line:49,column:11}},"30":{start:{line:48,column:12},end:{line:48,column:136}},"31":{start:{line:50,column:8},end:{line:54,column:11}},"32":{start:{line:51,column:33},end:{line:51,column:42}},"33":{start:{line:52,column:12},end:{line:52,column:56}},"34":{start:{line:53,column:12},end:{line:53,column:150}},"35":{start:{line:55,column:8},end:{line:60,column:11}},"36":{start:{line:56,column:33},end:{line:56,column:42}},"37":{start:{line:57,column:12},end:{line:57,column:59}},"38":{start:{line:58,column:12},end:{line:58,column:56}},"39":{start:{line:59,column:12},end:{line:59,column:157}},"40":{start:{line:61,column:8},end:{line:75,column:11}},"41":{start:{line:62,column:33},end:{line:62,column:42}},"42":{start:{line:63,column:12},end:{line:63,column:62}},"43":{start:{line:64,column:12},end:{line:64,column:64}},"44":{start:{line:65,column:12},end:{line:65,column:65}},"45":{start:{line:66,column:12},end:{line:66,column:77}},"46":{start:{line:67,column:12},end:{line:67,column:74}},"47":{start:{line:68,column:12},end:{line:68,column:67}},"48":{start:{line:69,column:12},end:{line:69,column:64}},"49":{start:{line:70,column:12},end:{line:70,column:56}},"50":{start:{line:71,column:12},end:{line:71,column:59}},"51":{start:{line:74,column:12},end:{line:74,column:283}},"52":{start:{line:77,column:4},end:{line:85,column:7}},"53":{start:{line:78,column:8},end:{line:80,column:11}},"54":{start:{line:79,column:12},end:{line:79,column:126}},"55":{start:{line:81,column:8},end:{line:84,column:11}},"56":{start:{line:82,column:12},end:{line:82,column:273}},"57":{start:{line:83,column:12},end:{line:83,column:96}},"58":{start:{line:86,column:4},end:{line:114,column:7}},"59":{start:{line:87,column:8},end:{line:89,column:11}},"60":{start:{line:88,column:12},end:{line:88,column:128}},"61":{start:{line:90,column:8},end:{line:102,column:11}},"62":{start:{line:91,column:33},end:{line:91,column:42}},"63":{start:{line:92,column:12},end:{line:92,column:62}},"64":{start:{line:93,column:12},end:{line:93,column:65}},"65":{start:{line:94,column:12},end:{line:94,column:76}},"66":{start:{line:95,column:12},end:{line:95,column:79}},"67":{start:{line:96,column:12},end:{line:96,column:77}},"68":{start:{line:97,column:12},end:{line:97,column:68}},"69":{start:{line:98,column:12},end:{line:98,column:67}},"70":{start:{line:99,column:12},end:{line:99,column:56}},"71":{start:{line:100,column:12},end:{line:100,column:59}},"72":{start:{line:101,column:12},end:{line:101,column:304}},"73":{start:{line:115,column:4},end:{line:123,column:7}},"74":{start:{line:116,column:8},end:{line:118,column:11}},"75":{start:{line:117,column:12},end:{line:117,column:128}},"76":{start:{line:119,column:8},end:{line:122,column:11}},"77":{start:{line:120,column:12},end:{line:120,column:59}},"78":{start:{line:121,column:12},end:{line:121,column:103}},"79":{start:{line:124,column:4},end:{line:141,column:7}},"80":{start:{line:125,column:8},end:{line:131,column:11}},"81":{start:{line:126,column:31},end:{line:126,column:220}},"82":{start:{line:127,column:33},end:{line:127,column:93}},"83":{start:{line:128,column:12},end:{line:128,column:117}},"84":{start:{line:129,column:27},end:{line:129,column:263}},"85":{start:{line:130,column:12},end:{line:130,column:38}},"86":{start:{line:132,column:8},end:{line:136,column:11}},"87":{start:{line:133,column:12},end:{line:133,column:108}},"88":{start:{line:134,column:27},end:{line:134,column:247}},"89":{start:{line:135,column:12},end:{line:135,column:39}},"90":{start:{line:137,column:8},end:{line:140,column:11}},"91":{start:{line:138,column:12},end:{line:138,column:100}},"92":{start:{line:139,column:12},end:{line:139,column:298}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:18,column:4},end:{line:18,column:5}},loc:{start:{line:18,column:18},end:{line:25,column:5}},line:18},"1":{name:"(anonymous_1)",decl:{start:{line:27,column:34},end:{line:27,column:35}},loc:{start:{line:27,column:40},end:{line:142,column:1}},line:27},"2":{name:"(anonymous_2)",decl:{start:{line:31,column:15},end:{line:31,column:16}},loc:{start:{line:31,column:21},end:{line:37,column:5}},line:31},"3":{name:"(anonymous_3)",decl:{start:{line:38,column:37},end:{line:38,column:38}},loc:{start:{line:38,column:43},end:{line:45,column:5}},line:38},"4":{name:"(anonymous_4)",decl:{start:{line:39,column:53},end:{line:39,column:54}},loc:{start:{line:39,column:65},end:{line:41,column:9}},line:39},"5":{name:"(anonymous_5)",decl:{start:{line:42,column:74},end:{line:42,column:75}},loc:{start:{line:42,column:86},end:{line:44,column:9}},line:42},"6":{name:"(anonymous_6)",decl:{start:{line:46,column:37},end:{line:46,column:38}},loc:{start:{line:46,column:43},end:{line:76,column:5}},line:46},"7":{name:"(anonymous_7)",decl:{start:{line:47,column:84},end:{line:47,column:85}},loc:{start:{line:47,column:96},end:{line:49,column:9}},line:47},"8":{name:"(anonymous_8)",decl:{start:{line:50,column:108},end:{line:50,column:109}},loc:{start:{line:50,column:120},end:{line:54,column:9}},line:50},"9":{name:"(anonymous_9)",decl:{start:{line:55,column:87},end:{line:55,column:88}},loc:{start:{line:55,column:99},end:{line:60,column:9}},line:55},"10":{name:"(anonymous_10)",decl:{start:{line:61,column:88},end:{line:61,column:89}},loc:{start:{line:61,column:100},end:{line:75,column:9}},line:61},"11":{name:"(anonymous_11)",decl:{start:{line:77,column:42},end:{line:77,column:43}},loc:{start:{line:77,column:48},end:{line:85,column:5}},line:77},"12":{name:"(anonymous_12)",decl:{start:{line:78,column:76},end:{line:78,column:77}},loc:{start:{line:78,column:88},end:{line:80,column:9}},line:78},"13":{name:"(anonymous_13)",decl:{start:{line:81,column:44},end:{line:81,column:45}},loc:{start:{line:81,column:56},end:{line:84,column:9}},line:81},"14":{name:"(anonymous_14)",decl:{start:{line:86,column:37},end:{line:86,column:38}},loc:{start:{line:86,column:43},end:{line:114,column:5}},line:86},"15":{name:"(anonymous_15)",decl:{start:{line:87,column:76},end:{line:87,column:77}},loc:{start:{line:87,column:88},end:{line:89,column:9}},line:87},"16":{name:"(anonymous_16)",decl:{start:{line:90,column:69},end:{line:90,column:70}},loc:{start:{line:90,column:81},end:{line:102,column:9}},line:90},"17":{name:"(anonymous_17)",decl:{start:{line:115,column:37},end:{line:115,column:38}},loc:{start:{line:115,column:43},end:{line:123,column:5}},line:115},"18":{name:"(anonymous_18)",decl:{start:{line:116,column:76},end:{line:116,column:77}},loc:{start:{line:116,column:88},end:{line:118,column:9}},line:116},"19":{name:"(anonymous_19)",decl:{start:{line:119,column:44},end:{line:119,column:45}},loc:{start:{line:119,column:56},end:{line:122,column:9}},line:119},"20":{name:"(anonymous_20)",decl:{start:{line:124,column:37},end:{line:124,column:38}},loc:{start:{line:124,column:43},end:{line:141,column:5}},line:124},"21":{name:"(anonymous_21)",decl:{start:{line:125,column:110},end:{line:125,column:111}},loc:{start:{line:125,column:122},end:{line:131,column:9}},line:125},"22":{name:"(anonymous_22)",decl:{start:{line:132,column:118},end:{line:132,column:119}},loc:{start:{line:132,column:130},end:{line:136,column:9}},line:132},"23":{name:"(anonymous_23)",decl:{start:{line:137,column:89},end:{line:137,column:90}},loc:{start:{line:137,column:101},end:{line:140,column:9}},line:137}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0,"44":0,"45":0,"46":0,"47":0,"48":0,"49":0,"50":0,"51":0,"52":0,"53":0,"54":0,"55":0,"56":0,"57":0,"58":0,"59":0,"60":0,"61":0,"62":0,"63":0,"64":0,"65":0,"66":0,"67":0,"68":0,"69":0,"70":0,"71":0,"72":0,"73":0,"74":0,"75":0,"76":0,"77":0,"78":0,"79":0,"80":0,"81":0,"82":0,"83":0,"84":0,"85":0,"86":0,"87":0,"88":0,"89":0,"90":0,"91":0,"92":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0},b:{},inputSourceMap:{version:3,file:"/home/prateeti/SOFIE-private-ledger/vulnerability-private-data-collections/src/vulnerability-contract.spec.ts",sources:["/home/prateeti/SOFIE-private-ledger/vulnerability-private-data-collections/src/vulnerability-contract.spec.ts"],names:[],mappings:"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",sourcesContent:["/*\n * SPDX-License-Identifier: Apache-2.0\n */\n\n//  tslint:disable: no-unused-expression\nimport { Context } from 'fabric-contract-api';\nimport { ChaincodeStub, ClientIdentity } from 'fabric-shim';\nimport { VulnerabilityContract } from '.';\n\nimport * as chai from 'chai';\nimport * as chaiAsPromised from 'chai-as-promised';\nimport crypto = require('crypto');\nimport * as sinon from 'sinon';\nimport * as sinonChai from 'sinon-chai';\nimport winston = require('winston');\n\nchai.should();\nchai.use(chaiAsPromised);\nchai.use(sinonChai);\n\nclass TestContext implements Context {\n    public stub: sinon.SinonStubbedInstance<ChaincodeStub> = sinon.createStubInstance(ChaincodeStub);\n    public clientIdentity: sinon.SinonStubbedInstance<ClientIdentity> = sinon.createStubInstance(ClientIdentity);\n    public logging = {\n        getLogger: sinon.stub().returns(sinon.createStubInstance(winston.createLogger().constructor)),\n        setLevel: sinon.stub(),\n    };\n}\n\ndescribe('VulnerabilityContract', () => {\n\n    let contract: VulnerabilityContract;\n    let ctx: TestContext;\n    const myCollectionName: string = 'CollectionOne';\n\n    beforeEach(() => {\n        contract = new VulnerabilityContract();\n        ctx = new TestContext();\n        ctx.stub.getPrivateData.withArgs(myCollectionName, '001').resolves(Buffer.from('{\"vendorID\":\"1247\",\"vendorName\":\"Intel\",\"productName\":\"Aeon UP Gateway\",\"vulnerabilityType\":\"Device Crash\",\"vulnerabilitySeverity\":\"Low\",\"gracePeriod\":\"90 days\",\"bountyAmount\":\"$1500\"}'));\n        const hashToVerify = crypto.createHash('sha256').update('{\"vendorID\":\"1247\",\"vendorName\":\"Intel\",\"productName\":\"Aeon UP Gateway\",\"vulnerabilityType\":\"Device Crash\",\"vulnerabilitySeverity\":\"Low\",\"gracePeriod\":\"90 days\",\"bountyAmount\":\"$1500\"}').digest('hex');\n        ctx.stub.getPrivateDataHash.withArgs(myCollectionName, '001').resolves(Buffer.from(hashToVerify, 'hex'));\n    });\n\n    describe('#vulnerabilityExists', () => {\n\n        it('should return true for a vulnerability', async () => {\n            await contract.vulnerabilityExists(ctx, '001').should.eventually.be.true;\n        });\n\n        it('should return false for a vulnerability that does not exist', async () => {\n            await contract.vulnerabilityExists(ctx, '003').should.eventually.be.false;\n        });\n    });\n\n    describe('#createVulnerability', () => {\n\n        it('should throw an error for a vulnerability details that already exists', async () => {\n            await contract.createVulnerability(ctx, '001').should.be.rejectedWith(/The asset vulnerability details 001 already exists/);\n        });\n\n        it('should throw an error if transient data is not provided when creating a vulnerability details', async () => {\n            const transientMap: Map<string, Buffer> = new Map<string, Buffer>();\n            ctx.stub.getTransient.returns(transientMap);\n            await contract.createVulnerability(ctx, '002').should.be.rejectedWith('The keys were not specified in transient data. Please try again.');\n        });\n\n        it('should throw an error if transient data key is not vulnerability details', async () => {\n            const transientMap: Map<string, Buffer> = new Map<string, Buffer>();\n            transientMap.set('vendID', Buffer.from('125'));// add all the vul details\n            ctx.stub.getTransient.returns(transientMap);\n            await contract.createVulnerability(ctx,'002').should.be.rejectedWith(`The vendorID key was not specified in transient data. Please try again.`);\n        });\n\n        it('should create a vulnerability details if transient data keys are provided', async () => {\n            const transientMap: Map<string, Buffer> = new Map<string, Buffer>();\n            transientMap.set('vendorID', Buffer.from('1500'));\n            transientMap.set('vendorName', Buffer.from('Sony'));\n            transientMap.set('productName', Buffer.from('LoU2'));\n            transientMap.set('vulnerabilityType', Buffer.from('Weak Story'));\n            transientMap.set('vulnerabilitySeverity', Buffer.from('Meh'));\n            transientMap.set('gracePeriod', Buffer.from('0 days'));\n            transientMap.set('bountyAmount', Buffer.from('$0'));\n            ctx.stub.getTransient.returns(transientMap);\n            await contract.createVulnerability(ctx, '002');\n            // const newLocal = '{\"vendorID\":\"1500\", \"vendorName\":\"Sony\", \"productName\":\"LoU2\", \"vulnerabilityType\":\"Weak Story\", \"vulnerabilitySeverity\":\"Meh\", \"gracePeriod\":\"0 days\", \"bountyAmount\":\"$0\"}';\n            // ctx.stub.putPrivateData.should.have.been.calledOnceWithExactly(myCollectionName, '002', Buffer.from('{\"privateValue\":\"1500\"}'));\n            ctx.stub.putPrivateData.should.have.been.calledOnceWithExactly(myCollectionName, '002', Buffer.from('{\"vendorID\":\"1500\",\"vendorName\":\"Sony\",\"productName\":\"LoU2\",\"vulnerabilityType\":\"Weak Story\",\"vulnerabilitySeverity\":\"Meh\",\"gracePeriod\":\"0 days\",\"bountyAmount\":\"$0\"}'));\n        });\n    });\n\n    describe('#readPrivateVulnerability', () => {\n\n        it('should throw an error for a vulnerability that does not exist', async () => {\n            await contract.readVulnerability(ctx, '003').should.be.rejectedWith(/The asset vulnerability 003 does not exist/);\n        });\n\n        it('should return a vulnerability', async () => {\n            await contract.readVulnerability(ctx, '001').should.eventually.deep.equal({vendorID:'1247',vendorName:'Intel',productName:'Aeon UP Gateway',vulnerabilityType:'Device Crash',vulnerabilitySeverity:'Low',gracePeriod:'90 days',bountyAmount:'$1500'});\n            ctx.stub.getPrivateData.should.have.been.calledWithExactly(myCollectionName, '001');\n        });\n    });\n\n    describe('#updateVulnerability', () => {\n\n        it('should throw an error for a vulnerability that does not exist', async () => {\n            await contract.updateVulnerability(ctx, '003').should.be.rejectedWith(/The asset vulnerability 003 does not exist/);\n        });\n        it('should update my private asset if vulnerability exists', async () => {\n            const transientMap: Map<string, Buffer> = new Map<string, Buffer>();\n            transientMap.set('vendorID', Buffer.from('1247'));\n            transientMap.set('vendorName', Buffer.from('Intel'));\n            transientMap.set('productName', Buffer.from('Aeon UP Gateway'));\n            transientMap.set('vulnerabilityType', Buffer.from('Device Crash'));\n            transientMap.set('vulnerabilitySeverity', Buffer.from('Medium'));\n            transientMap.set('gracePeriod', Buffer.from('90 days'));\n            transientMap.set('bountyAmount', Buffer.from('$1800'));\n            ctx.stub.getTransient.returns(transientMap);\n            await contract.updateVulnerability(ctx, '001');\n            ctx.stub.putPrivateData.should.have.been.calledOnceWithExactly(myCollectionName, '001', Buffer.from('{\"vendorID\":\"1247\",\"vendorName\":\"Intel\",\"productName\":\"Aeon UP Gateway\",\"vulnerabilityType\":\"Device Crash\",\"vulnerabilitySeverity\":\"Medium\",\"gracePeriod\":\"90 days\",\"bountyAmount\":\"$1800\"}'));\n        });\n\n        /* it('should throw an error if transient data is not provided when updating a vulnerability', async () => {\n            const transientMap: Map<string, Buffer> = new Map<string, Buffer>();\n            ctx.stub.getTransient.returns(transientMap);\n            await contract.updateVulnerability(ctx, '001', \"Not Patched\").should.be.rejectedWith(`The privateValue key was not specified in transient data. Please try again.`);\n        });*/\n\n        /* it('should throw an error if transient data key is not privateValue', async () => {\n            const transientMap: Map<string, Buffer> = new Map<string, Buffer>();\n            transientMap.set('prVal', Buffer.from('125'));\n            ctx.stub.getTransient.returns(transientMap);\n            await contract.updateVulnerability(ctx, '001').should.be.rejectedWith(`The privateValue key was not specified in transient data. Please try again.`);\n        });*/\n    });\n\n    describe('#deleteVulnerability', () => {\n\n        it('should throw an error for a vulnerability that does not exist', async () => {\n            await contract.deleteVulnerability(ctx, '003').should.be.rejectedWith(/The asset vulnerability 003 does not exist/);\n        });\n\n        it('should delete a vulnerability', async () => {\n            await contract.deleteVulnerability(ctx, '001');\n            ctx.stub.deletePrivateData.should.have.been.calledOnceWithExactly(myCollectionName, '001');\n        });\n    });\n\n    describe('#verifyVulnerability', () => {\n\n        it('should return true if hash calculated from object provided matches the hash of the private data', async () => {\n            const privateObj: string = '{\"vendorID\":\"1247\",\"vendorName\":\"Intel\",\"productName\":\"Aeon UP Gateway\",\"vulnerabilityType\":\"Device Crash\",\"vulnerabilitySeverity\":\"Medium\",\"gracePeriod\":\"90 days\",\"bountyAmount\":\"$1800\"}';\n            const hashToVerify: string = crypto.createHash('sha256').update(privateObj).digest('hex');\n            ctx.stub.getPrivateDataHash.withArgs(myCollectionName, '001').resolves(Buffer.from(hashToVerify, 'hex'));\n            const result: boolean = await contract.verifyVulnerability(ctx, '001', {vendorID:'1247',vendorName:'Intel',productName:'Aeon UP Gateway',vulnerabilityType:'Device Crash',vulnerabilitySeverity:'Medium',gracePeriod:'90 days',bountyAmount:'$1800'});\n            result.should.equal(true);\n        });\n\n        it('should return false if hash calculated from object provided does not match the hash of the private data', async () => {\n            ctx.stub.getPrivateDataHash.withArgs(myCollectionName, '001').resolves(Buffer.from('someHash'));\n            const result: boolean = await contract.verifyVulnerability(ctx, '001', {vendorID:'someValue',vendorName:'Sony',productName:'LoU2',vulnerabilityType:'Weak Story',vulnerabilitySeverity:'Meh',gracePeriod:'0 days',bountyAmount:'$0'});\n            result.should.equal(false);\n        });\n        it('should throw an error when user tries to verify an asset that doesnt exist', async () => {\n            ctx.stub.getPrivateDataHash.withArgs(myCollectionName, '005').resolves(Buffer.from(''));\n            await contract.verifyVulnerability(ctx, '005', {vendorID:'someValue',vendorName:'Sony',productName:'LoU2',vulnerabilityType:'Weak Story',vulnerabilitySeverity:'Meh',gracePeriod:'0 days',bountyAmount:'$0'}).should.be.rejectedWith('No private data hash with the Key: 005');\n        });\n    });\n});\n"]},_coverageSchema:"1a1c01bbd47fc00a2c39e90264f33305004495a9",hash:"b667c8a0f4b0fbf0b64c0d59538543eab0b8df8c"};var coverage=global[gcv]||(global[gcv]={});if(!coverage[path]||coverage[path].hash!==hash){coverage[path]=coverageData;}var actualCoverage=coverage[path];cov_1lbzhnkp8f=function(){return actualCoverage;};return actualCoverage;}cov_1lbzhnkp8f();cov_1lbzhnkp8f().s[0]++;Object.defineProperty(exports,"__esModule",{value:true});const fabric_shim_1=(cov_1lbzhnkp8f().s[1]++,require("fabric-shim"));const _1=(cov_1lbzhnkp8f().s[2]++,require("."));const chai=(cov_1lbzhnkp8f().s[3]++,require("chai"));const chaiAsPromised=(cov_1lbzhnkp8f().s[4]++,require("chai-as-promised"));const crypto=(cov_1lbzhnkp8f().s[5]++,require("crypto"));const sinon=(cov_1lbzhnkp8f().s[6]++,require("sinon"));const sinonChai=(cov_1lbzhnkp8f().s[7]++,require("sinon-chai"));const winston=(cov_1lbzhnkp8f().s[8]++,require("winston"));cov_1lbzhnkp8f().s[9]++;chai.should();cov_1lbzhnkp8f().s[10]++;chai.use(chaiAsPromised);cov_1lbzhnkp8f().s[11]++;chai.use(sinonChai);class TestContext{constructor(){cov_1lbzhnkp8f().f[0]++;cov_1lbzhnkp8f().s[12]++;this.stub=sinon.createStubInstance(fabric_shim_1.ChaincodeStub);cov_1lbzhnkp8f().s[13]++;this.clientIdentity=sinon.createStubInstance(fabric_shim_1.ClientIdentity);cov_1lbzhnkp8f().s[14]++;this.logging={getLogger:sinon.stub().returns(sinon.createStubInstance(winston.createLogger().constructor)),setLevel:sinon.stub()};}}cov_1lbzhnkp8f().s[15]++;describe('VulnerabilityContract',()=>{cov_1lbzhnkp8f().f[1]++;let contract;let ctx;const myCollectionName=(cov_1lbzhnkp8f().s[16]++,'CollectionOne');cov_1lbzhnkp8f().s[17]++;beforeEach(()=>{cov_1lbzhnkp8f().f[2]++;cov_1lbzhnkp8f().s[18]++;contract=new _1.VulnerabilityContract();cov_1lbzhnkp8f().s[19]++;ctx=new TestContext();cov_1lbzhnkp8f().s[20]++;ctx.stub.getPrivateData.withArgs(myCollectionName,'001').resolves(Buffer.from('{"vendorID":"1247","vendorName":"Intel","productName":"Aeon UP Gateway","vulnerabilityType":"Device Crash","vulnerabilitySeverity":"Low","gracePeriod":"90 days","bountyAmount":"$1500"}'));const hashToVerify=(cov_1lbzhnkp8f().s[21]++,crypto.createHash('sha256').update('{"vendorID":"1247","vendorName":"Intel","productName":"Aeon UP Gateway","vulnerabilityType":"Device Crash","vulnerabilitySeverity":"Low","gracePeriod":"90 days","bountyAmount":"$1500"}').digest('hex'));cov_1lbzhnkp8f().s[22]++;ctx.stub.getPrivateDataHash.withArgs(myCollectionName,'001').resolves(Buffer.from(hashToVerify,'hex'));});cov_1lbzhnkp8f().s[23]++;describe('#vulnerabilityExists',()=>{cov_1lbzhnkp8f().f[3]++;cov_1lbzhnkp8f().s[24]++;it('should return true for a vulnerability',async()=>{cov_1lbzhnkp8f().f[4]++;cov_1lbzhnkp8f().s[25]++;await contract.vulnerabilityExists(ctx,'001').should.eventually.be.true;});cov_1lbzhnkp8f().s[26]++;it('should return false for a vulnerability that does not exist',async()=>{cov_1lbzhnkp8f().f[5]++;cov_1lbzhnkp8f().s[27]++;await contract.vulnerabilityExists(ctx,'003').should.eventually.be.false;});});cov_1lbzhnkp8f().s[28]++;describe('#createVulnerability',()=>{cov_1lbzhnkp8f().f[6]++;cov_1lbzhnkp8f().s[29]++;it('should throw an error for a vulnerability details that already exists',async()=>{cov_1lbzhnkp8f().f[7]++;cov_1lbzhnkp8f().s[30]++;await contract.createVulnerability(ctx,'001').should.be.rejectedWith(/The asset vulnerability details 001 already exists/);});cov_1lbzhnkp8f().s[31]++;it('should throw an error if transient data is not provided when creating a vulnerability details',async()=>{cov_1lbzhnkp8f().f[8]++;const transientMap=(cov_1lbzhnkp8f().s[32]++,new Map());cov_1lbzhnkp8f().s[33]++;ctx.stub.getTransient.returns(transientMap);cov_1lbzhnkp8f().s[34]++;await contract.createVulnerability(ctx,'002').should.be.rejectedWith('The keys were not specified in transient data. Please try again.');});cov_1lbzhnkp8f().s[35]++;it('should throw an error if transient data key is not vulnerability details',async()=>{cov_1lbzhnkp8f().f[9]++;const transientMap=(cov_1lbzhnkp8f().s[36]++,new Map());cov_1lbzhnkp8f().s[37]++;transientMap.set('vendID',Buffer.from('125'));// add all the vul details
cov_1lbzhnkp8f().s[38]++;ctx.stub.getTransient.returns(transientMap);cov_1lbzhnkp8f().s[39]++;await contract.createVulnerability(ctx,'002').should.be.rejectedWith(`The vendorID key was not specified in transient data. Please try again.`);});cov_1lbzhnkp8f().s[40]++;it('should create a vulnerability details if transient data keys are provided',async()=>{cov_1lbzhnkp8f().f[10]++;const transientMap=(cov_1lbzhnkp8f().s[41]++,new Map());cov_1lbzhnkp8f().s[42]++;transientMap.set('vendorID',Buffer.from('1500'));cov_1lbzhnkp8f().s[43]++;transientMap.set('vendorName',Buffer.from('Sony'));cov_1lbzhnkp8f().s[44]++;transientMap.set('productName',Buffer.from('LoU2'));cov_1lbzhnkp8f().s[45]++;transientMap.set('vulnerabilityType',Buffer.from('Weak Story'));cov_1lbzhnkp8f().s[46]++;transientMap.set('vulnerabilitySeverity',Buffer.from('Meh'));cov_1lbzhnkp8f().s[47]++;transientMap.set('gracePeriod',Buffer.from('0 days'));cov_1lbzhnkp8f().s[48]++;transientMap.set('bountyAmount',Buffer.from('$0'));cov_1lbzhnkp8f().s[49]++;ctx.stub.getTransient.returns(transientMap);cov_1lbzhnkp8f().s[50]++;await contract.createVulnerability(ctx,'002');// const newLocal = '{"vendorID":"1500", "vendorName":"Sony", "productName":"LoU2", "vulnerabilityType":"Weak Story", "vulnerabilitySeverity":"Meh", "gracePeriod":"0 days", "bountyAmount":"$0"}';
// ctx.stub.putPrivateData.should.have.been.calledOnceWithExactly(myCollectionName, '002', Buffer.from('{"privateValue":"1500"}'));
cov_1lbzhnkp8f().s[51]++;ctx.stub.putPrivateData.should.have.been.calledOnceWithExactly(myCollectionName,'002',Buffer.from('{"vendorID":"1500","vendorName":"Sony","productName":"LoU2","vulnerabilityType":"Weak Story","vulnerabilitySeverity":"Meh","gracePeriod":"0 days","bountyAmount":"$0"}'));});});cov_1lbzhnkp8f().s[52]++;describe('#readPrivateVulnerability',()=>{cov_1lbzhnkp8f().f[11]++;cov_1lbzhnkp8f().s[53]++;it('should throw an error for a vulnerability that does not exist',async()=>{cov_1lbzhnkp8f().f[12]++;cov_1lbzhnkp8f().s[54]++;await contract.readVulnerability(ctx,'003').should.be.rejectedWith(/The asset vulnerability 003 does not exist/);});cov_1lbzhnkp8f().s[55]++;it('should return a vulnerability',async()=>{cov_1lbzhnkp8f().f[13]++;cov_1lbzhnkp8f().s[56]++;await contract.readVulnerability(ctx,'001').should.eventually.deep.equal({vendorID:'1247',vendorName:'Intel',productName:'Aeon UP Gateway',vulnerabilityType:'Device Crash',vulnerabilitySeverity:'Low',gracePeriod:'90 days',bountyAmount:'$1500'});cov_1lbzhnkp8f().s[57]++;ctx.stub.getPrivateData.should.have.been.calledWithExactly(myCollectionName,'001');});});cov_1lbzhnkp8f().s[58]++;describe('#updateVulnerability',()=>{cov_1lbzhnkp8f().f[14]++;cov_1lbzhnkp8f().s[59]++;it('should throw an error for a vulnerability that does not exist',async()=>{cov_1lbzhnkp8f().f[15]++;cov_1lbzhnkp8f().s[60]++;await contract.updateVulnerability(ctx,'003').should.be.rejectedWith(/The asset vulnerability 003 does not exist/);});cov_1lbzhnkp8f().s[61]++;it('should update my private asset if vulnerability exists',async()=>{cov_1lbzhnkp8f().f[16]++;const transientMap=(cov_1lbzhnkp8f().s[62]++,new Map());cov_1lbzhnkp8f().s[63]++;transientMap.set('vendorID',Buffer.from('1247'));cov_1lbzhnkp8f().s[64]++;transientMap.set('vendorName',Buffer.from('Intel'));cov_1lbzhnkp8f().s[65]++;transientMap.set('productName',Buffer.from('Aeon UP Gateway'));cov_1lbzhnkp8f().s[66]++;transientMap.set('vulnerabilityType',Buffer.from('Device Crash'));cov_1lbzhnkp8f().s[67]++;transientMap.set('vulnerabilitySeverity',Buffer.from('Medium'));cov_1lbzhnkp8f().s[68]++;transientMap.set('gracePeriod',Buffer.from('90 days'));cov_1lbzhnkp8f().s[69]++;transientMap.set('bountyAmount',Buffer.from('$1800'));cov_1lbzhnkp8f().s[70]++;ctx.stub.getTransient.returns(transientMap);cov_1lbzhnkp8f().s[71]++;await contract.updateVulnerability(ctx,'001');cov_1lbzhnkp8f().s[72]++;ctx.stub.putPrivateData.should.have.been.calledOnceWithExactly(myCollectionName,'001',Buffer.from('{"vendorID":"1247","vendorName":"Intel","productName":"Aeon UP Gateway","vulnerabilityType":"Device Crash","vulnerabilitySeverity":"Medium","gracePeriod":"90 days","bountyAmount":"$1800"}'));});/* it('should throw an error if transient data is not provided when updating a vulnerability', async () => {
            const transientMap: Map<string, Buffer> = new Map<string, Buffer>();
            ctx.stub.getTransient.returns(transientMap);
            await contract.updateVulnerability(ctx, '001', "Not Patched").should.be.rejectedWith(`The privateValue key was not specified in transient data. Please try again.`);
        });*/ /* it('should throw an error if transient data key is not privateValue', async () => {
            const transientMap: Map<string, Buffer> = new Map<string, Buffer>();
            transientMap.set('prVal', Buffer.from('125'));
            ctx.stub.getTransient.returns(transientMap);
            await contract.updateVulnerability(ctx, '001').should.be.rejectedWith(`The privateValue key was not specified in transient data. Please try again.`);
        });*/});cov_1lbzhnkp8f().s[73]++;describe('#deleteVulnerability',()=>{cov_1lbzhnkp8f().f[17]++;cov_1lbzhnkp8f().s[74]++;it('should throw an error for a vulnerability that does not exist',async()=>{cov_1lbzhnkp8f().f[18]++;cov_1lbzhnkp8f().s[75]++;await contract.deleteVulnerability(ctx,'003').should.be.rejectedWith(/The asset vulnerability 003 does not exist/);});cov_1lbzhnkp8f().s[76]++;it('should delete a vulnerability',async()=>{cov_1lbzhnkp8f().f[19]++;cov_1lbzhnkp8f().s[77]++;await contract.deleteVulnerability(ctx,'001');cov_1lbzhnkp8f().s[78]++;ctx.stub.deletePrivateData.should.have.been.calledOnceWithExactly(myCollectionName,'001');});});cov_1lbzhnkp8f().s[79]++;describe('#verifyVulnerability',()=>{cov_1lbzhnkp8f().f[20]++;cov_1lbzhnkp8f().s[80]++;it('should return true if hash calculated from object provided matches the hash of the private data',async()=>{cov_1lbzhnkp8f().f[21]++;const privateObj=(cov_1lbzhnkp8f().s[81]++,'{"vendorID":"1247","vendorName":"Intel","productName":"Aeon UP Gateway","vulnerabilityType":"Device Crash","vulnerabilitySeverity":"Medium","gracePeriod":"90 days","bountyAmount":"$1800"}');const hashToVerify=(cov_1lbzhnkp8f().s[82]++,crypto.createHash('sha256').update(privateObj).digest('hex'));cov_1lbzhnkp8f().s[83]++;ctx.stub.getPrivateDataHash.withArgs(myCollectionName,'001').resolves(Buffer.from(hashToVerify,'hex'));const result=(cov_1lbzhnkp8f().s[84]++,await contract.verifyVulnerability(ctx,'001',{vendorID:'1247',vendorName:'Intel',productName:'Aeon UP Gateway',vulnerabilityType:'Device Crash',vulnerabilitySeverity:'Medium',gracePeriod:'90 days',bountyAmount:'$1800'}));cov_1lbzhnkp8f().s[85]++;result.should.equal(true);});cov_1lbzhnkp8f().s[86]++;it('should return false if hash calculated from object provided does not match the hash of the private data',async()=>{cov_1lbzhnkp8f().f[22]++;cov_1lbzhnkp8f().s[87]++;ctx.stub.getPrivateDataHash.withArgs(myCollectionName,'001').resolves(Buffer.from('someHash'));const result=(cov_1lbzhnkp8f().s[88]++,await contract.verifyVulnerability(ctx,'001',{vendorID:'someValue',vendorName:'Sony',productName:'LoU2',vulnerabilityType:'Weak Story',vulnerabilitySeverity:'Meh',gracePeriod:'0 days',bountyAmount:'$0'}));cov_1lbzhnkp8f().s[89]++;result.should.equal(false);});cov_1lbzhnkp8f().s[90]++;it('should throw an error when user tries to verify an asset that doesnt exist',async()=>{cov_1lbzhnkp8f().f[23]++;cov_1lbzhnkp8f().s[91]++;ctx.stub.getPrivateDataHash.withArgs(myCollectionName,'005').resolves(Buffer.from(''));cov_1lbzhnkp8f().s[92]++;await contract.verifyVulnerability(ctx,'005',{vendorID:'someValue',vendorName:'Sony',productName:'LoU2',vulnerabilityType:'Weak Story',vulnerabilitySeverity:'Meh',gracePeriod:'0 days',bountyAmount:'$0'}).should.be.rejectedWith('No private data hash with the Key: 005');});});});//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,